{
  "address": "0xdd5D778606d4AD56f375ACa135973B0EA1891dd8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cosaddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "CosignerAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "cosaddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "CosignerRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MIN_COSIGNER_REQUIRED",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cosaddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "addCosigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cosaddrs",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "addCosignerBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "getCosignCount",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        }
      ],
      "name": "getCosigners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "cosaddr",
          "type": "address"
        }
      ],
      "name": "removeCosigner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "cosaddrs",
          "type": "address[]"
        }
      ],
      "name": "removeCosignerBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc003130f1c51424ec78ecca36ccd24367b236279e2152275cad9477f9f5514b0",
  "receipt": {
    "to": null,
    "from": "0x573f672bbe93f1b03d383A0cb502682467e7B71f",
    "contractAddress": "0xdd5D778606d4AD56f375ACa135973B0EA1891dd8",
    "transactionIndex": 0,
    "gasUsed": "2321669",
    "logsBloom": "0x
    "blockHash": "0xf684bbd55bf05f9e3d262715c55deef804c1edbfed5d403a48f6c1eff8923d56",
    "transactionHash": "0xc003130f1c51424ec78ecca36ccd24367b236279e2152275cad9477f9f5514b0",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 42405,
        "transactionHash": "0xc003130f1c51424ec78ecca36ccd24367b236279e2152275cad9477f9f5514b0",
        "address": "0xdd5D778606d4AD56f375ACa135973B0EA1891dd8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000573f672bbe93f1b03d383a0cb502682467e7b71f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf684bbd55bf05f9e3d262715c55deef804c1edbfed5d403a48f6c1eff8923d56"
      }
    ],
    "blockNumber": 42405,
    "cumulativeGasUsed": "2321669",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8b473d7a2ccc113ea38e743670f8e57a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cosaddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"CosignerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"cosaddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"CosignerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_COSIGNER_REQUIRED\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cosaddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"addCosigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cosaddrs\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"addCosignerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getCosignCount\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"getCosigners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"cosaddr\",\"type\":\"address\"}],\"name\":\"removeCosigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"cosaddrs\",\"type\":\"address[]\"}],\"name\":\"removeCosignerBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/managers/BridgeCosignerManager.sol\":\"BridgeCosignerManager\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xbc991a1cf357ce19480831a40792c814238a3b5458134703682abd8aa39719fb\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeCosignerManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBridgeCosignerManager {\\n    event CosignerAdded(address indexed cosaddr, uint256 chainId);\\n    event CosignerRemoved(address indexed cosaddr, uint256 chainId);\\n    struct Cosigner {\\n        address addr;\\n        uint256 chainId;\\n        uint256 index;\\n        bool active;\\n    }\\n\\n    function addCosigner(address cosaddr, uint256 chainId) external;\\n\\n    function addCosignerBatch(address[] calldata cosaddrs, uint256 chainId)\\n        external;\\n\\n    function removeCosigner(address cosaddr) external;\\n\\n    function removeCosignerBatch(address[] calldata cosaddrs) external;\\n\\n    function getCosigners(uint256 chainId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getCosignCount(uint256 chainId) external view returns (uint8);\\n\\n    function verify(\\n        bytes32 commitment,\\n        uint256 chainId,\\n        bytes[] calldata signatures\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfabdd8ef3a89d2a7a561c731347028ccdb596e05154054c61e51908f402b0dde\",\"license\":\"MIT\"},\"contracts/managers/BridgeCosignerManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nimport \\\"../interfaces/IBridgeCosignerManager.sol\\\";\\n\\ncontract BridgeCosignerManager is Ownable, IBridgeCosignerManager {\\n    using ECDSA for bytes32;\\n\\n    uint8 public constant MIN_COSIGNER_REQUIRED = 2;\\n    mapping(address => Cosigner) internal _cosigners;\\n    mapping(uint256 => address[]) internal _cosaddrs;\\n\\n    function addCosigner(address cosaddr, uint256 chainId)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        Cosigner memory cosigner = _cosigners[cosaddr];\\n        require(!cosigner.active, \\\"BCM: ALREADY_EXIST\\\");\\n        require(cosaddr != address(0), \\\"BCM: ZERO_ADDRESS\\\");\\n\\n        uint256 currentChainId;\\n        assembly {\\n            currentChainId := chainid()\\n        }\\n        require(currentChainId != chainId, \\\"BCM: ONLY_EXTERNAL\\\");\\n\\n        _cosaddrs[chainId].push(cosaddr);\\n        _cosigners[cosaddr] = Cosigner(\\n            cosaddr,\\n            chainId,\\n            _cosaddrs[chainId].length - 1,\\n            true\\n        );\\n\\n        emit CosignerAdded(cosaddr, chainId);\\n    }\\n\\n    function addCosignerBatch(address[] calldata cosaddrs, uint256 chainId)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(cosaddrs.length != 0, \\\"BCM: EMPTY_INPUTS\\\");\\n\\n        for (uint256 i = 0; i < cosaddrs.length; i++) {\\n            addCosigner(cosaddrs[i], chainId);\\n        }\\n    }\\n\\n    function removeCosigner(address cosaddr) public override onlyOwner {\\n        Cosigner memory cosigner = _cosigners[cosaddr];\\n        require(cosigner.active, \\\"BCM: NOT_EXIST\\\");\\n        require(cosaddr != address(0), \\\"BCM: ZERO_ADDRESS\\\");\\n\\n        // move last to rm slot\\n        _cosaddrs[cosigner.chainId][cosigner.index] = _cosaddrs[\\n            cosigner.chainId\\n        ][_cosaddrs[cosigner.chainId].length - 1];\\n        _cosaddrs[cosigner.chainId].pop();\\n\\n        // change indexing\\n        address cosaddrLast = _cosaddrs[cosigner.chainId][cosigner.index];\\n        _cosigners[cosaddrLast].index = cosigner.index;\\n\\n        delete _cosigners[cosaddr];\\n\\n        emit CosignerRemoved(cosigner.addr, cosigner.chainId);\\n    }\\n\\n    function removeCosignerBatch(address[] calldata cosaddrs)\\n        public\\n        override\\n        onlyOwner\\n    {\\n        require(cosaddrs.length == 0, \\\"BCM: EMPTY_INPUTS\\\");\\n\\n        for (uint256 i = 0; i < cosaddrs.length; i++) {\\n            removeCosigner(cosaddrs[i]);\\n        }\\n    }\\n\\n    function getCosigners(uint256 chainId)\\n        public\\n        view\\n        override\\n        returns (address[] memory)\\n    {\\n        return _cosaddrs[chainId];\\n    }\\n\\n    function getCosignCount(uint256 chainId)\\n        public\\n        view\\n        override\\n        returns (uint8)\\n    {\\n        uint8 voteCount = (uint8(_cosaddrs[chainId].length) * 2) / 3; // 67%\\n        return\\n            MIN_COSIGNER_REQUIRED >= voteCount\\n                ? MIN_COSIGNER_REQUIRED\\n                : voteCount;\\n    }\\n\\n    function recover(bytes32 hash, bytes calldata signature)\\n        internal\\n        pure\\n        returns (address)\\n    {\\n        return hash.toEthSignedMessageHash().recover(signature);\\n    }\\n\\n    function verify(\\n        bytes32 commitment,\\n        uint256 chainId,\\n        bytes[] calldata signatures\\n    ) external view override returns (bool) {\\n        uint8 _required = getCosignCount(chainId);\\n        require(_required <= signatures.length, \\\"BCM: MISMATCH_SIGNATURES\\\");\\n\\n        address[] memory cached = new address[](signatures.length);\\n        uint8 signersMatch;\\n\\n        for (uint8 i = 0; i < signatures.length; i++) {\\n            address signer = recover(commitment, signatures[i]);\\n            Cosigner memory cosigner = _cosigners[signer];\\n\\n            if (\\n                cosigner.active &&\\n                cosigner.chainId == chainId &&\\n                !_inCache(cached, signer)\\n            ) {\\n                signersMatch++;\\n                cached[i] = signer;\\n                if (signersMatch == _required) return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    function _inCache(address[] memory cached, address signer)\\n        internal\\n        pure\\n        returns (bool hasCache)\\n    {\\n        for (uint8 j = 0; j < cached.length; j++) {\\n            if (cached[j] == signer) {\\n                hasCache = true;\\n                break;\\n            }\\n            // prevent iteration if cache not updated in slot\\n            if (cached[j] == address(0)) {\\n                break;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x519b9b1736d0b1c098700436932019016d31221df2bec372cfe2ff83aba37add\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5062000032620000266200003860201b60201c565b6200004060201b60201c565b62000104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6128d980620001146000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80637874e3bc116100715780637874e3bc146101645780638789b873146101805780638da5cb5b1461019e578063c9807fd0146101bc578063d371f924146101d8578063f2fde38b146101f4576100a9565b806318ffdbd3146100ae5780633e6e8f68146100ca57806345f25122146100fa57806358874d8f1461012a578063715018a61461015a575b600080fd5b6100c860048036038101906100c39190611d3d565b610210565b005b6100e460048036038101906100df9190611d95565b610351565b6040516100f1919061213b565b60405180910390f35b610114600480360381019061010f9190611e01565b610657565b6040516101219190612119565b60405180910390f35b610144600480360381019061013f9190611e01565b6106f8565b6040516101519190612336565b60405180910390f35b61016261074b565b005b61017e60048036038101906101799190611cbc565b6107d3565b005b610188610c00565b6040516101959190612336565b60405180910390f35b6101a6610c05565b6040516101b391906120fe565b60405180910390f35b6101d660048036038101906101d19190611cf8565b610c2e565b005b6101f260048036038101906101ed9190611c93565b610d6c565b005b61020e60048036038101906102099190611c93565b6112e1565b005b6102186113d9565b73ffffffffffffffffffffffffffffffffffffffff16610236610c05565b73ffffffffffffffffffffffffffffffffffffffff161461028c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610283906122db565b60405180910390fd5b60008383905014156102d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca906122bb565b60405180910390fd5b60005b8383905081101561034b5761033884848381811061031d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103329190611c93565b836107d3565b8080610343906124fc565b9150506102d6565b50505050565b60008061035d856106f8565b9050838390508160ff1611156103a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039f9061221b565b60405180910390fd5b60008484905067ffffffffffffffff8111156103ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561041b5781602001602082028036833780820191505090505b509050600080600090505b868690508160ff16101561064657600061048d8a89898560ff16818110610476577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906104889190612351565b6113e1565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050806060015180156105765750898160200151145b80156105895750610587858361144b565b155b1561063157838061059990612545565b94505081858460ff16815181106105d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508560ff168460ff161415610630576001965050505050505061064f565b5b5050808061063e90612545565b915050610426565b50600093505050505b949350505050565b6060600260008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156106ec57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a2575b50505050509050919050565b600080600360028060008681526020019081526020016000208054905061071f919061242e565b61072991906123fd565b90508060ff16600260ff1610156107405780610743565b60025b915050919050565b6107536113d9565b73ffffffffffffffffffffffffffffffffffffffff16610771610c05565b73ffffffffffffffffffffffffffffffffffffffff16146107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be906122db565b60405180910390fd5b6107d16000611576565b565b6107db6113d9565b73ffffffffffffffffffffffffffffffffffffffff166107f9610c05565b73ffffffffffffffffffffffffffffffffffffffff161461084f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610846906122db565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050806060015115610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e9061227b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce9061225b565b60405180910390fd5b600046905082811415610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a16906121bb565b60405180910390fd5b60026000848152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160016002600087815260200190815260200160002080549050610ae39190612469565b815260200160011515815250600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff167f0f0900314007cc69e519d583fb1873eba5aa4c24e2877bc4d2e44522dd73cd0e84604051610bf2919061231b565b60405180910390a250505050565b600281565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c366113d9565b73ffffffffffffffffffffffffffffffffffffffff16610c54610c05565b73ffffffffffffffffffffffffffffffffffffffff1614610caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca1906122db565b60405180910390fd5b60008282905014610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce7906122bb565b60405180910390fd5b60005b82829050811015610d6757610d54838383818110610d3a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610d4f9190611c93565b610d6c565b8080610d5f906124fc565b915050610cf3565b505050565b610d746113d9565b73ffffffffffffffffffffffffffffffffffffffff16610d92610c05565b73ffffffffffffffffffffffffffffffffffffffff1614610de8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddf906122db565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef6906122fb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f669061225b565b60405180910390fd5b60026000826020015181526020019081526020016000206001600260008460200151815260200190815260200160002080549050610fad9190612469565b81548110610fe4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600083602001518152602001908152602001600020826040015181548110611062577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060026000826020015181526020019081526020016000208054806110f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560006002600083602001518152602001908152602001600020826040015181548110611181577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160400151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549060ff02191690555050816000015173ffffffffffffffffffffffffffffffffffffffff167f61d7c9145a2e12d35dfb19f8fe0ff62e8eea82802cb7f5ddf745d3dc4bc32a2383602001516040516112d4919061231b565b60405180910390a2505050565b6112e96113d9565b73ffffffffffffffffffffffffffffffffffffffff16611307610c05565b73ffffffffffffffffffffffffffffffffffffffff161461135d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611354906122db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c4906121fb565b60405180910390fd5b6113d681611576565b50565b600033905090565b600061144283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506114348661163a565b61166a90919063ffffffff16565b90509392505050565b600080600090505b83518160ff16101561156f578273ffffffffffffffffffffffffffffffffffffffff16848260ff16815181106114b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156114df576001915061156f565b600073ffffffffffffffffffffffffffffffffffffffff16848260ff1681518110611533577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561155c5761156f565b808061156790612545565b915050611453565b5092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008160405160200161164d91906120d8565b604051602081830303815290604052805190602001209050919050565b60008060006116798585611691565b9150915061168681611714565b819250505092915050565b6000806041835114156116d35760008060006020860151925060408601519150606086015160001a90506116c787828585611a65565b9450945050505061170d565b6040835114156117045760008060208501519150604085015190506116f9868383611b72565b93509350505061170d565b60006002915091505b9250929050565b6000600481111561174e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611787577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561179257611a62565b600160048111156117cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611805577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183d9061219b565b60405180910390fd5b60026004811115611880577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156118b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156118fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f1906121db565b60405180910390fd5b60036004811115611934577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561196d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156119ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a59061223b565b60405180910390fd5b6004808111156119e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611a20577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a589061229b565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611aa0576000600391509150611b69565b601b8560ff1614158015611ab85750601c8560ff1614155b15611aca576000600491509150611b69565b600060018787878760405160008152602001604052604051611aef9493929190612156565b6020604051602081039080840390855afa158015611b11573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b6057600060019250925050611b69565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050611bb287828885611a65565b935093505050935093915050565b600081359050611bcf8161285e565b92915050565b60008083601f840112611be757600080fd5b8235905067ffffffffffffffff811115611c0057600080fd5b602083019150836020820283011115611c1857600080fd5b9250929050565b60008083601f840112611c3157600080fd5b8235905067ffffffffffffffff811115611c4a57600080fd5b602083019150836020820283011115611c6257600080fd5b9250929050565b600081359050611c7881612875565b92915050565b600081359050611c8d8161288c565b92915050565b600060208284031215611ca557600080fd5b6000611cb384828501611bc0565b91505092915050565b60008060408385031215611ccf57600080fd5b6000611cdd85828601611bc0565b9250506020611cee85828601611c7e565b9150509250929050565b60008060208385031215611d0b57600080fd5b600083013567ffffffffffffffff811115611d2557600080fd5b611d3185828601611bd5565b92509250509250929050565b600080600060408486031215611d5257600080fd5b600084013567ffffffffffffffff811115611d6c57600080fd5b611d7886828701611bd5565b93509350506020611d8b86828701611c7e565b9150509250925092565b60008060008060608587031215611dab57600080fd5b6000611db987828801611c69565b9450506020611dca87828801611c7e565b935050604085013567ffffffffffffffff811115611de757600080fd5b611df387828801611c1f565b925092505092959194509250565b600060208284031215611e1357600080fd5b6000611e2184828501611c7e565b91505092915050565b6000611e368383611e42565b60208301905092915050565b611e4b8161249d565b82525050565b611e5a8161249d565b82525050565b6000611e6b826123b8565b611e7581856123d0565b9350611e80836123a8565b8060005b83811015611eb1578151611e988882611e2a565b9750611ea3836123c3565b925050600181019050611e84565b5085935050505092915050565b611ec7816124af565b82525050565b611ed6816124bb565b82525050565b611eed611ee8826124bb565b61256f565b82525050565b6000611f006018836123e1565b9150611f0b826125d7565b602082019050919050565b6000611f236012836123e1565b9150611f2e82612600565b602082019050919050565b6000611f46601f836123e1565b9150611f5182612629565b602082019050919050565b6000611f69601c836123f2565b9150611f7482612652565b601c82019050919050565b6000611f8c6026836123e1565b9150611f978261267b565b604082019050919050565b6000611faf6018836123e1565b9150611fba826126ca565b602082019050919050565b6000611fd26022836123e1565b9150611fdd826126f3565b604082019050919050565b6000611ff56011836123e1565b915061200082612742565b602082019050919050565b60006120186012836123e1565b91506120238261276b565b602082019050919050565b600061203b6022836123e1565b915061204682612794565b604082019050919050565b600061205e6011836123e1565b9150612069826127e3565b602082019050919050565b60006120816020836123e1565b915061208c8261280c565b602082019050919050565b60006120a4600e836123e1565b91506120af82612835565b602082019050919050565b6120c3816124e5565b82525050565b6120d2816124ef565b82525050565b60006120e382611f5c565b91506120ef8284611edc565b60208201915081905092915050565b60006020820190506121136000830184611e51565b92915050565b600060208201905081810360008301526121338184611e60565b905092915050565b60006020820190506121506000830184611ebe565b92915050565b600060808201905061216b6000830187611ecd565b61217860208301866120c9565b6121856040830185611ecd565b6121926060830184611ecd565b95945050505050565b600060208201905081810360008301526121b481611ef3565b9050919050565b600060208201905081810360008301526121d481611f16565b9050919050565b600060208201905081810360008301526121f481611f39565b9050919050565b6000602082019050818103600083015261221481611f7f565b9050919050565b6000602082019050818103600083015261223481611fa2565b9050919050565b6000602082019050818103600083015261225481611fc5565b9050919050565b6000602082019050818103600083015261227481611fe8565b9050919050565b600060208201905081810360008301526122948161200b565b9050919050565b600060208201905081810360008301526122b48161202e565b9050919050565b600060208201905081810360008301526122d481612051565b9050919050565b600060208201905081810360008301526122f481612074565b9050919050565b6000602082019050818103600083015261231481612097565b9050919050565b600060208201905061233060008301846120ba565b92915050565b600060208201905061234b60008301846120c9565b92915050565b6000808335600160200384360303811261236a57600080fd5b80840192508235915067ffffffffffffffff82111561238857600080fd5b6020830192506001820236038313156123a057600080fd5b509250929050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612408826124ef565b9150612413836124ef565b925082612423576124226125a8565b5b828204905092915050565b6000612439826124ef565b9150612444836124ef565b92508160ff048311821515161561245e5761245d612579565b5b828202905092915050565b6000612474826124e5565b915061247f836124e5565b92508282101561249257612491612579565b5b828203905092915050565b60006124a8826124c5565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612507826124e5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561253a57612539612579565b5b600182019050919050565b6000612550826124ef565b915060ff82141561256457612563612579565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f42434d3a204f4e4c595f45585445524e414c0000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f42434d3a204d49534d415443485f5349474e4154555245530000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f42434d3a205a45524f5f41444452455353000000000000000000000000000000600082015250565b7f42434d3a20414c52454144595f45584953540000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f42434d3a20454d5054595f494e50555453000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42434d3a204e4f545f4558495354000000000000000000000000000000000000600082015250565b6128678161249d565b811461287257600080fd5b50565b61287e816124bb565b811461288957600080fd5b50565b612895816124e5565b81146128a057600080fd5b5056fea2646970667358221220e22871d0105d8fc63d81e6aeeb0ab332150cb02b475b8c4c67e3ba64cf6d6a0264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80637874e3bc116100715780637874e3bc146101645780638789b873146101805780638da5cb5b1461019e578063c9807fd0146101bc578063d371f924146101d8578063f2fde38b146101f4576100a9565b806318ffdbd3146100ae5780633e6e8f68146100ca57806345f25122146100fa57806358874d8f1461012a578063715018a61461015a575b600080fd5b6100c860048036038101906100c39190611d3d565b610210565b005b6100e460048036038101906100df9190611d95565b610351565b6040516100f1919061213b565b60405180910390f35b610114600480360381019061010f9190611e01565b610657565b6040516101219190612119565b60405180910390f35b610144600480360381019061013f9190611e01565b6106f8565b6040516101519190612336565b60405180910390f35b61016261074b565b005b61017e60048036038101906101799190611cbc565b6107d3565b005b610188610c00565b6040516101959190612336565b60405180910390f35b6101a6610c05565b6040516101b391906120fe565b60405180910390f35b6101d660048036038101906101d19190611cf8565b610c2e565b005b6101f260048036038101906101ed9190611c93565b610d6c565b005b61020e60048036038101906102099190611c93565b6112e1565b005b6102186113d9565b73ffffffffffffffffffffffffffffffffffffffff16610236610c05565b73ffffffffffffffffffffffffffffffffffffffff161461028c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610283906122db565b60405180910390fd5b60008383905014156102d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102ca906122bb565b60405180910390fd5b60005b8383905081101561034b5761033884848381811061031d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906103329190611c93565b836107d3565b8080610343906124fc565b9150506102d6565b50505050565b60008061035d856106f8565b9050838390508160ff1611156103a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039f9061221b565b60405180910390fd5b60008484905067ffffffffffffffff8111156103ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561041b5781602001602082028036833780820191505090505b509050600080600090505b868690508160ff16101561064657600061048d8a89898560ff16818110610476577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020028101906104889190612351565b6113e1565b90506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050806060015180156105765750898160200151145b80156105895750610587858361144b565b155b1561063157838061059990612545565b94505081858460ff16815181106105d9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508560ff168460ff161415610630576001965050505050505061064f565b5b5050808061063e90612545565b915050610426565b50600093505050505b949350505050565b6060600260008381526020019081526020016000208054806020026020016040519081016040528092919081815260200182805480156106ec57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106a2575b50505050509050919050565b600080600360028060008681526020019081526020016000208054905061071f919061242e565b61072991906123fd565b90508060ff16600260ff1610156107405780610743565b60025b915050919050565b6107536113d9565b73ffffffffffffffffffffffffffffffffffffffff16610771610c05565b73ffffffffffffffffffffffffffffffffffffffff16146107c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107be906122db565b60405180910390fd5b6107d16000611576565b565b6107db6113d9565b73ffffffffffffffffffffffffffffffffffffffff166107f9610c05565b73ffffffffffffffffffffffffffffffffffffffff161461084f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610846906122db565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff1615151515815250509050806060015115610967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095e9061227b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce9061225b565b60405180910390fd5b600046905082811415610a1f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a16906121bb565b60405180910390fd5b60026000848152602001908152602001600020849080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060405180608001604052808573ffffffffffffffffffffffffffffffffffffffff16815260200184815260200160016002600087815260200190815260200160002080549050610ae39190612469565b815260200160011515815250600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550602082015181600101556040820151816002015560608201518160030160006101000a81548160ff0219169083151502179055509050508373ffffffffffffffffffffffffffffffffffffffff167f0f0900314007cc69e519d583fb1873eba5aa4c24e2877bc4d2e44522dd73cd0e84604051610bf2919061231b565b60405180910390a250505050565b600281565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610c366113d9565b73ffffffffffffffffffffffffffffffffffffffff16610c54610c05565b73ffffffffffffffffffffffffffffffffffffffff1614610caa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca1906122db565b60405180910390fd5b60008282905014610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce7906122bb565b60405180910390fd5b60005b82829050811015610d6757610d54838383818110610d3a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610d4f9190611c93565b610d6c565b8080610d5f906124fc565b915050610cf3565b505050565b610d746113d9565b73ffffffffffffffffffffffffffffffffffffffff16610d92610c05565b73ffffffffffffffffffffffffffffffffffffffff1614610de8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ddf906122db565b60405180910390fd5b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160018201548152602001600282015481526020016003820160009054906101000a900460ff16151515158152505090508060600151610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef6906122fb565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610f6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f669061225b565b60405180910390fd5b60026000826020015181526020019081526020016000206001600260008460200151815260200190815260200160002080549050610fad9190612469565b81548110610fe4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166002600083602001518152602001908152602001600020826040015181548110611062577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060026000826020015181526020019081526020016000208054806110f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055905560006002600083602001518152602001908152602001600020826040015181548110611181577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508160400151600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020181905550600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600182016000905560028201600090556003820160006101000a81549060ff02191690555050816000015173ffffffffffffffffffffffffffffffffffffffff167f61d7c9145a2e12d35dfb19f8fe0ff62e8eea82802cb7f5ddf745d3dc4bc32a2383602001516040516112d4919061231b565b60405180910390a2505050565b6112e96113d9565b73ffffffffffffffffffffffffffffffffffffffff16611307610c05565b73ffffffffffffffffffffffffffffffffffffffff161461135d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611354906122db565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156113cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c4906121fb565b60405180910390fd5b6113d681611576565b50565b600033905090565b600061144283838080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050506114348661163a565b61166a90919063ffffffff16565b90509392505050565b600080600090505b83518160ff16101561156f578273ffffffffffffffffffffffffffffffffffffffff16848260ff16815181106114b2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156114df576001915061156f565b600073ffffffffffffffffffffffffffffffffffffffff16848260ff1681518110611533577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16141561155c5761156f565b808061156790612545565b915050611453565b5092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008160405160200161164d91906120d8565b604051602081830303815290604052805190602001209050919050565b60008060006116798585611691565b9150915061168681611714565b819250505092915050565b6000806041835114156116d35760008060006020860151925060408601519150606086015160001a90506116c787828585611a65565b9450945050505061170d565b6040835114156117045760008060208501519150604085015190506116f9868383611b72565b93509350505061170d565b60006002915091505b9250929050565b6000600481111561174e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611787577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561179257611a62565b600160048111156117cc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611805577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611846576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161183d9061219b565b60405180910390fd5b60026004811115611880577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160048111156118b9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156118fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f1906121db565b60405180910390fd5b60036004811115611934577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b81600481111561196d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156119ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a59061223b565b60405180910390fd5b6004808111156119e7577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816004811115611a20577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611a61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a589061229b565b60405180910390fd5b5b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611aa0576000600391509150611b69565b601b8560ff1614158015611ab85750601c8560ff1614155b15611aca576000600491509150611b69565b600060018787878760405160008152602001604052604051611aef9493929190612156565b6020604051602081039080840390855afa158015611b11573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611b6057600060019250925050611b69565b80600092509250505b94509492505050565b6000806000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff85169150601b8560ff1c019050611bb287828885611a65565b935093505050935093915050565b600081359050611bcf8161285e565b92915050565b60008083601f840112611be757600080fd5b8235905067ffffffffffffffff811115611c0057600080fd5b602083019150836020820283011115611c1857600080fd5b9250929050565b60008083601f840112611c3157600080fd5b8235905067ffffffffffffffff811115611c4a57600080fd5b602083019150836020820283011115611c6257600080fd5b9250929050565b600081359050611c7881612875565b92915050565b600081359050611c8d8161288c565b92915050565b600060208284031215611ca557600080fd5b6000611cb384828501611bc0565b91505092915050565b60008060408385031215611ccf57600080fd5b6000611cdd85828601611bc0565b9250506020611cee85828601611c7e565b9150509250929050565b60008060208385031215611d0b57600080fd5b600083013567ffffffffffffffff811115611d2557600080fd5b611d3185828601611bd5565b92509250509250929050565b600080600060408486031215611d5257600080fd5b600084013567ffffffffffffffff811115611d6c57600080fd5b611d7886828701611bd5565b93509350506020611d8b86828701611c7e565b9150509250925092565b60008060008060608587031215611dab57600080fd5b6000611db987828801611c69565b9450506020611dca87828801611c7e565b935050604085013567ffffffffffffffff811115611de757600080fd5b611df387828801611c1f565b925092505092959194509250565b600060208284031215611e1357600080fd5b6000611e2184828501611c7e565b91505092915050565b6000611e368383611e42565b60208301905092915050565b611e4b8161249d565b82525050565b611e5a8161249d565b82525050565b6000611e6b826123b8565b611e7581856123d0565b9350611e80836123a8565b8060005b83811015611eb1578151611e988882611e2a565b9750611ea3836123c3565b925050600181019050611e84565b5085935050505092915050565b611ec7816124af565b82525050565b611ed6816124bb565b82525050565b611eed611ee8826124bb565b61256f565b82525050565b6000611f006018836123e1565b9150611f0b826125d7565b602082019050919050565b6000611f236012836123e1565b9150611f2e82612600565b602082019050919050565b6000611f46601f836123e1565b9150611f5182612629565b602082019050919050565b6000611f69601c836123f2565b9150611f7482612652565b601c82019050919050565b6000611f8c6026836123e1565b9150611f978261267b565b604082019050919050565b6000611faf6018836123e1565b9150611fba826126ca565b602082019050919050565b6000611fd26022836123e1565b9150611fdd826126f3565b604082019050919050565b6000611ff56011836123e1565b915061200082612742565b602082019050919050565b60006120186012836123e1565b91506120238261276b565b602082019050919050565b600061203b6022836123e1565b915061204682612794565b604082019050919050565b600061205e6011836123e1565b9150612069826127e3565b602082019050919050565b60006120816020836123e1565b915061208c8261280c565b602082019050919050565b60006120a4600e836123e1565b91506120af82612835565b602082019050919050565b6120c3816124e5565b82525050565b6120d2816124ef565b82525050565b60006120e382611f5c565b91506120ef8284611edc565b60208201915081905092915050565b60006020820190506121136000830184611e51565b92915050565b600060208201905081810360008301526121338184611e60565b905092915050565b60006020820190506121506000830184611ebe565b92915050565b600060808201905061216b6000830187611ecd565b61217860208301866120c9565b6121856040830185611ecd565b6121926060830184611ecd565b95945050505050565b600060208201905081810360008301526121b481611ef3565b9050919050565b600060208201905081810360008301526121d481611f16565b9050919050565b600060208201905081810360008301526121f481611f39565b9050919050565b6000602082019050818103600083015261221481611f7f565b9050919050565b6000602082019050818103600083015261223481611fa2565b9050919050565b6000602082019050818103600083015261225481611fc5565b9050919050565b6000602082019050818103600083015261227481611fe8565b9050919050565b600060208201905081810360008301526122948161200b565b9050919050565b600060208201905081810360008301526122b48161202e565b9050919050565b600060208201905081810360008301526122d481612051565b9050919050565b600060208201905081810360008301526122f481612074565b9050919050565b6000602082019050818103600083015261231481612097565b9050919050565b600060208201905061233060008301846120ba565b92915050565b600060208201905061234b60008301846120c9565b92915050565b6000808335600160200384360303811261236a57600080fd5b80840192508235915067ffffffffffffffff82111561238857600080fd5b6020830192506001820236038313156123a057600080fd5b509250929050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000612408826124ef565b9150612413836124ef565b925082612423576124226125a8565b5b828204905092915050565b6000612439826124ef565b9150612444836124ef565b92508160ff048311821515161561245e5761245d612579565b5b828202905092915050565b6000612474826124e5565b915061247f836124e5565b92508282101561249257612491612579565b5b828203905092915050565b60006124a8826124c5565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000612507826124e5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561253a57612539612579565b5b600182019050919050565b6000612550826124ef565b915060ff82141561256457612563612579565b5b600182019050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b7f42434d3a204f4e4c595f45585445524e414c0000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b7f19457468657265756d205369676e6564204d6573736167653a0a333200000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f42434d3a204d49534d415443485f5349474e4154555245530000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f42434d3a205a45524f5f41444452455353000000000000000000000000000000600082015250565b7f42434d3a20414c52454144595f45584953540000000000000000000000000000600082015250565b7f45434453413a20696e76616c6964207369676e6174757265202776272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b7f42434d3a20454d5054595f494e50555453000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42434d3a204e4f545f4558495354000000000000000000000000000000000000600082015250565b6128678161249d565b811461287257600080fd5b50565b61287e816124bb565b811461288957600080fd5b50565b612895816124e5565b81146128a057600080fd5b5056fea2646970667358221220e22871d0105d8fc63d81e6aeeb0ab332150cb02b475b8c4c67e3ba64cf6d6a0264736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/managers/BridgeCosignerManager.sol:BridgeCosignerManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 589,
        "contract": "contracts/managers/BridgeCosignerManager.sol:BridgeCosignerManager",
        "label": "_cosigners",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Cosigner)515_storage)"
      },
      {
        "astId": 594,
        "contract": "contracts/managers/BridgeCosignerManager.sol:BridgeCosignerManager",
        "label": "_cosaddrs",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(Cosigner)515_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IBridgeCosignerManager.Cosigner)",
        "numberOfBytes": "32",
        "value": "t_struct(Cosigner)515_storage"
      },
      "t_mapping(t_uint256,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_struct(Cosigner)515_storage": {
        "encoding": "inplace",
        "label": "struct IBridgeCosignerManager.Cosigner",
        "members": [
          {
            "astId": 508,
            "contract": "contracts/managers/BridgeCosignerManager.sol:BridgeCosignerManager",
            "label": "addr",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 510,
            "contract": "contracts/managers/BridgeCosignerManager.sol:BridgeCosignerManager",
            "label": "chainId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 512,
            "contract": "contracts/managers/BridgeCosignerManager.sol:BridgeCosignerManager",
            "label": "index",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 514,
            "contract": "contracts/managers/BridgeCosignerManager.sol:BridgeCosignerManager",
            "label": "active",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}