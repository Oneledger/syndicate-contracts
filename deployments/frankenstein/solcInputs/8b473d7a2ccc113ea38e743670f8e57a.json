{
  "language": "Solidity",
  "sources": {
    "contracts/managers/BridgeCosignerManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nimport \"../interfaces/IBridgeCosignerManager.sol\";\n\ncontract BridgeCosignerManager is Ownable, IBridgeCosignerManager {\n    using ECDSA for bytes32;\n\n    uint8 public constant MIN_COSIGNER_REQUIRED = 2;\n    mapping(address => Cosigner) internal _cosigners;\n    mapping(uint256 => address[]) internal _cosaddrs;\n\n    function addCosigner(address cosaddr, uint256 chainId)\n        public\n        override\n        onlyOwner\n    {\n        Cosigner memory cosigner = _cosigners[cosaddr];\n        require(!cosigner.active, \"BCM: ALREADY_EXIST\");\n        require(cosaddr != address(0), \"BCM: ZERO_ADDRESS\");\n\n        uint256 currentChainId;\n        assembly {\n            currentChainId := chainid()\n        }\n        require(currentChainId != chainId, \"BCM: ONLY_EXTERNAL\");\n\n        _cosaddrs[chainId].push(cosaddr);\n        _cosigners[cosaddr] = Cosigner(\n            cosaddr,\n            chainId,\n            _cosaddrs[chainId].length - 1,\n            true\n        );\n\n        emit CosignerAdded(cosaddr, chainId);\n    }\n\n    function addCosignerBatch(address[] calldata cosaddrs, uint256 chainId)\n        public\n        override\n        onlyOwner\n    {\n        require(cosaddrs.length != 0, \"BCM: EMPTY_INPUTS\");\n\n        for (uint256 i = 0; i < cosaddrs.length; i++) {\n            addCosigner(cosaddrs[i], chainId);\n        }\n    }\n\n    function removeCosigner(address cosaddr) public override onlyOwner {\n        Cosigner memory cosigner = _cosigners[cosaddr];\n        require(cosigner.active, \"BCM: NOT_EXIST\");\n        require(cosaddr != address(0), \"BCM: ZERO_ADDRESS\");\n\n        // move last to rm slot\n        _cosaddrs[cosigner.chainId][cosigner.index] = _cosaddrs[\n            cosigner.chainId\n        ][_cosaddrs[cosigner.chainId].length - 1];\n        _cosaddrs[cosigner.chainId].pop();\n\n        // change indexing\n        address cosaddrLast = _cosaddrs[cosigner.chainId][cosigner.index];\n        _cosigners[cosaddrLast].index = cosigner.index;\n\n        delete _cosigners[cosaddr];\n\n        emit CosignerRemoved(cosigner.addr, cosigner.chainId);\n    }\n\n    function removeCosignerBatch(address[] calldata cosaddrs)\n        public\n        override\n        onlyOwner\n    {\n        require(cosaddrs.length == 0, \"BCM: EMPTY_INPUTS\");\n\n        for (uint256 i = 0; i < cosaddrs.length; i++) {\n            removeCosigner(cosaddrs[i]);\n        }\n    }\n\n    function getCosigners(uint256 chainId)\n        public\n        view\n        override\n        returns (address[] memory)\n    {\n        return _cosaddrs[chainId];\n    }\n\n    function getCosignCount(uint256 chainId)\n        public\n        view\n        override\n        returns (uint8)\n    {\n        uint8 voteCount = (uint8(_cosaddrs[chainId].length) * 2) / 3; // 67%\n        return\n            MIN_COSIGNER_REQUIRED >= voteCount\n                ? MIN_COSIGNER_REQUIRED\n                : voteCount;\n    }\n\n    function recover(bytes32 hash, bytes calldata signature)\n        internal\n        pure\n        returns (address)\n    {\n        return hash.toEthSignedMessageHash().recover(signature);\n    }\n\n    function verify(\n        bytes32 commitment,\n        uint256 chainId,\n        bytes[] calldata signatures\n    ) external view override returns (bool) {\n        uint8 _required = getCosignCount(chainId);\n        require(_required <= signatures.length, \"BCM: MISMATCH_SIGNATURES\");\n\n        address[] memory cached = new address[](signatures.length);\n        uint8 signersMatch;\n\n        for (uint8 i = 0; i < signatures.length; i++) {\n            address signer = recover(commitment, signatures[i]);\n            Cosigner memory cosigner = _cosigners[signer];\n\n            if (\n                cosigner.active &&\n                cosigner.chainId == chainId &&\n                !_inCache(cached, signer)\n            ) {\n                signersMatch++;\n                cached[i] = signer;\n                if (signersMatch == _required) return true;\n            }\n        }\n\n        return false;\n    }\n\n    function _inCache(address[] memory cached, address signer)\n        internal\n        pure\n        returns (bool hasCache)\n    {\n        for (uint8 j = 0; j < cached.length; j++) {\n            if (cached[j] == signer) {\n                hasCache = true;\n                break;\n            }\n            // prevent iteration if cache not updated in slot\n            if (cached[j] == address(0)) {\n                break;\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/interfaces/IBridgeCosignerManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IBridgeCosignerManager {\n    event CosignerAdded(address indexed cosaddr, uint256 chainId);\n    event CosignerRemoved(address indexed cosaddr, uint256 chainId);\n    struct Cosigner {\n        address addr;\n        uint256 chainId;\n        uint256 index;\n        bool active;\n    }\n\n    function addCosigner(address cosaddr, uint256 chainId) external;\n\n    function addCosignerBatch(address[] calldata cosaddrs, uint256 chainId)\n        external;\n\n    function removeCosigner(address cosaddr) external;\n\n    function removeCosignerBatch(address[] calldata cosaddrs) external;\n\n    function getCosigners(uint256 chainId)\n        external\n        view\n        returns (address[] memory);\n\n    function getCosignCount(uint256 chainId) external view returns (uint8);\n\n    function verify(\n        bytes32 commitment,\n        uint256 chainId,\n        bytes[] calldata signatures\n    ) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}