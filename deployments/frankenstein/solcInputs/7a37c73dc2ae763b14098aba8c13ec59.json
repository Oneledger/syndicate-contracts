{
  "language": "Solidity",
  "sources": {
    "contracts/managers/BridgeTokenManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.6.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../interfaces/IBridgeTokenManager.sol\";\n\ncontract BridgeTokenManager is Ownable, IBridgeTokenManager {\n    uint8 public constant MAX_SIZE = 2;\n    bytes32 private immutable _salt;\n\n    mapping(bytes32 => Link) private _links;\n\n    constructor() {\n        _salt = keccak256(\n            abi.encodePacked(\n                blockhash(block.number - 1),\n                block.timestamp,\n                block.difficulty,\n                block.coinbase\n            )\n        );\n    }\n\n    /**\n     * @dev This should be responsible to get token mapping for current chain\n     * @param addr address of token to get it's association\n     * @param chainId of domain where token used\n     */\n    function fetch(address addr, uint256 chainId)\n        public\n        view\n        override\n        returns (Token memory token, bool ok)\n    {\n        Link memory link = _get(addr, chainId);\n        if (!link.exist) {\n            return (token, ok);\n        }\n\n        if (\n            link.enterToken.chainId == chainId ||\n            link.exitToken.chainId == chainId\n        ) {\n            token = link.enterToken;\n            ok = true;\n        }\n        return (token, ok);\n    }\n\n    /**\n     * @dev This should be responsible to remove tokens connection between chains\n     * @param addr address of token to revoke\n     * @param chainId of domain where token used\n     */\n    function revoke(address addr, uint256 chainId) external override onlyOwner {\n        Link memory link = _get(addr, chainId);\n        require(link.exist, \"BridgeTokenManager: NOT_EXIST\");\n\n        _remove(link);\n\n        emit LinkRemoved(link);\n    }\n\n    /**\n     * @dev This should be responsible to connect tokens between chains\n     * @param tokens addresses on link connection\n     * @param issueTypes for tokens\n     * @param chainIds where they are located\n     */\n    function issue(\n        address[] calldata tokens,\n        IssueType[] calldata issueTypes,\n        uint256[] calldata chainIds\n    ) external override onlyOwner {\n        require(\n            tokens.length == issueTypes.length,\n            \"BridgeTokenManager: WRONG_LENGTH\"\n        );\n        require(\n            tokens.length == chainIds.length,\n            \"BridgeTokenManager: WRONG_LENGTH\"\n        );\n        require(tokens.length == MAX_SIZE, \"BridgeTokenManager: MAX_SIZE\");\n\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        require(chainIds[0] == chainId, \"BridgeTokenManager: WRONG_CHAIN_ID\");\n\n        Link memory link = _insert(\n            Token(tokens[0], issueTypes[0], chainIds[0]),\n            Token(tokens[1], issueTypes[1], chainIds[1])\n        );\n\n        emit LinkAdded(link);\n    }\n\n    function _set(Link memory link) private {\n        _links[_key(link.enterToken.addr, link.enterToken.chainId)] = link;\n        _links[_key(link.exitToken.addr, link.exitToken.chainId)] = link;\n    }\n\n    function _remove(Link memory link) private {\n        delete _links[_key(link.enterToken.addr, link.enterToken.chainId)];\n        delete _links[_key(link.exitToken.addr, link.exitToken.chainId)];\n    }\n\n    function _get(address addr, uint256 chainId)\n        private\n        view\n        returns (Link memory link)\n    {\n        link = _links[_key(addr, chainId)];\n    }\n\n    function _key(address addr, uint256 chainId)\n        private\n        view\n        returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_salt, addr, chainId));\n    }\n\n    function _insert(Token memory enterToken, Token memory exitToken)\n        private\n        returns (Link memory)\n    {\n        Link memory exitLink = _get(exitToken.addr, exitToken.chainId);\n        require(!exitLink.exist, \"BridgeTokenManager: EXIT_EXIST\");\n\n        Link memory link = Link(enterToken, exitToken, true);\n        _set(link);\n\n        return link;\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IBridgeTokenManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ninterface IBridgeTokenManager {\n    event LinkAdded(Link indexed link);\n    event LinkRemoved(Link indexed link);\n\n    enum IssueType {\n        DEFAULT,\n        MINTABLE\n    }\n\n    struct Token {\n        address addr;\n        IssueType issueType;\n        uint256 chainId;\n    }\n\n    struct Link {\n        Token enterToken;\n        Token exitToken;\n        bool exist;\n    }\n\n    function issue(\n        address[] calldata tokens,\n        IssueType[] calldata issueTypes,\n        uint256[] calldata chainIds\n    ) external;\n\n    function revoke(address addr, uint256 chainId) external;\n\n    function fetch(address addr, uint256 chainId)\n        external\n        view\n        returns (Token memory token, bool ok);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}