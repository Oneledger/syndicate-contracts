{
  "address": "0x27853405113E01809954Ad3f1E3A4502738d143e",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exitor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "domain",
          "type": "bytes32"
        }
      ],
      "name": "Enter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exitor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "domain",
          "type": "bytes32"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY_FEE_DENOMINATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY_FEE_NUMERATOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cosignerManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "contract IBridgeCosignerManager",
          "name": "cosignerManager_",
          "type": "address"
        },
        {
          "internalType": "contract IBridgeTokenManager",
          "name": "tokenManager_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCosignerManager",
          "type": "address"
        }
      ],
      "name": "setCosignerManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTokenManager",
          "type": "address"
        }
      ],
      "name": "setTokenManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenManagerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb93809e1241a89d4452c3afebb142f2fc700c9935d5fe8683fe8698eeeed02c7",
  "receipt": {
    "to": null,
    "from": "0xff189ee42C5D33837a58d0B7F16cE095E5C1Caab",
    "contractAddress": "0x27853405113E01809954Ad3f1E3A4502738d143e",
    "transactionIndex": 0,
    "gasUsed": "3338573",
    "logsBloom": "0x
    "blockHash": "0xc0cc45abebab111dd3b7faa669fff8a9a8c7981ab69a731f2ca47cd58bd847ea",
    "transactionHash": "0xb93809e1241a89d4452c3afebb142f2fc700c9935d5fe8683fe8698eeeed02c7",
    "logs": [],
    "blockNumber": 43364,
    "cumulativeGasUsed": "3338573",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7af0171935c463a30826e80be330ec62",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exitor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exitor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"domain\",\"type\":\"bytes32\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_FEE_NUMERATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cosignerManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"contract IBridgeCosignerManager\",\"name\":\"cosignerManager_\",\"type\":\"address\"},{\"internalType\":\"contract IBridgeTokenManager\",\"name\":\"tokenManager_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCosignerManager\",\"type\":\"address\"}],\"name\":\"setCosignerManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cosignerManagerAddress()\":{\"returns\":{\"_0\":\"The address of cosigner manager contract\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCosignerManager(address)\":{\"details\":\"This should be the contract responsible for sign by behalf of the payloads\",\"params\":{\"newCosignerManager\":\"address of cosigner manager contract\"}},\"setTokenManager(address)\":{\"details\":\"This should be the contract responsible for checking and add tokens to crosschain mapping\",\"params\":{\"newTokenManager\":\"address of token manager contract\"}},\"tokenManagerAddress()\":{\"returns\":{\"_0\":\"The address of token manager contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cosignerManagerAddress()\":{\"notice\":\"Get the address of contract set as cosigner manager\"},\"setCosignerManager(address)\":{\"notice\":\"Set the cosigner manager, callable only by cosigners\"},\"setTokenManager(address)\":{\"notice\":\"Set the token manager, callable only by cosigners\"},\"tokenManagerAddress()\":{\"notice\":\"Get the address of contract set as token manager\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeRouter.sol\":\"BridgeRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"contracts/BridgeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./library/RLPReader.sol\\\";\\nimport \\\"./versions/Version0.sol\\\";\\nimport \\\"./interfaces/IBridgeCosignerManager.sol\\\";\\nimport \\\"./interfaces/IBridgeToken.sol\\\";\\nimport \\\"./interfaces/IBridgeTokenManager.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IOwnable.sol\\\";\\n\\nabstract contract AbstractBridgeStorage is\\n    Version0,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    mapping(address => uint256) internal _nonces;\\n    mapping(bytes32 => bool) internal _commitments;\\n\\n    // (0.2%) hardcoded liquidity fee.\\n    // In future: shared between syndicate, relayers and lp providers\\n    uint256 public constant LIQUIDITY_FEE_NUMERATOR = 9980;\\n    uint256 public constant LIQUIDITY_FEE_DENOMINATOR = 10000;\\n\\n    // ===== initialize override =====\\n    IBridgeCosignerManager internal _cosignerManager;\\n    IBridgeTokenManager internal _tokenManager;\\n    string internal _name;\\n    uint256 internal _chainId;\\n    bytes32 public DOMAIN_SEPARATOR;\\n\\n    // ===== signing =====\\n    bytes32 internal constant ENTER_EVENT_SIG =\\n        keccak256(\\\"Enter(address,address,uint256,uint256,uint256,bytes32)\\\");\\n\\n    // ===== proxy =====\\n\\n    uint256[49] private __gap;\\n\\n    // ===== functionality to override =====\\n\\n    /**\\n     * @dev Hook that is called after enter check. This includes\\n     * token deposit in according to the bridge direction.\\n     */\\n    function enterProcess(\\n        IBridgeTokenManager.Token memory tokenData,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    /**\\n     * @dev Hook that is called after exit check. This includes\\n     * token withdraw in according to the bridge direction.\\n     */\\n    function exitProcess(\\n        IBridgeTokenManager.Token memory tokenData,\\n        address to,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    // ===== domain =====\\n\\n    function getChainId() external view returns (uint256) {\\n        return _chainId;\\n    }\\n\\n    function _calculateDomainSeparator(string memory name, uint256 chainId)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(name)),\\n                    keccak256(abi.encodePacked(VERSION)),\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\\ncontract BridgeRouter is AbstractBridgeStorage {\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    // Initialize function for proxy constructor. Must be used atomically\\n    function initialize(\\n        string memory name_,\\n        IBridgeCosignerManager cosignerManager_,\\n        IBridgeTokenManager tokenManager_\\n    ) public initializer {\\n        _name = name_;\\n        _cosignerManager = cosignerManager_;\\n        _tokenManager = tokenManager_;\\n        assembly {\\n            sstore(_chainId.slot, chainid())\\n        }\\n        DOMAIN_SEPARATOR = _calculateDomainSeparator(_name, _chainId);\\n\\n        // proxy inits\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    event Enter(\\n        address indexed token,\\n        address indexed exitor,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 chainId,\\n        bytes32 domain\\n    );\\n\\n    function emitEnter(\\n        address token,\\n        address from,\\n        uint256 amount\\n    ) internal {\\n        emit Enter(\\n            token,\\n            from,\\n            amount,\\n            _nonces[from],\\n            _chainId,\\n            _calculateDomainSeparator(_name, _chainId)\\n        );\\n        _nonces[from]++;\\n    }\\n\\n    event Exit(\\n        address indexed token,\\n        address indexed exitor,\\n        uint256 amount,\\n        bytes32 commitment,\\n        uint256 chainId,\\n        bytes32 domain\\n    );\\n\\n    function emitExit(\\n        address token,\\n        address to,\\n        bytes32 commitment,\\n        uint256 amount\\n    ) internal {\\n        emit Exit(\\n            token,\\n            to,\\n            amount,\\n            commitment,\\n            _chainId,\\n            _calculateDomainSeparator(_name, _chainId)\\n        );\\n    }\\n\\n    function unsafeTransfer(address to, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"BR: INSUFFICIENT_BALANCE\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"BR: SEND_REVERT\\\");\\n    }\\n\\n    /**\\n     * @notice Set the token manager, callable only by cosigners\\n     * @dev This should be the contract responsible for checking and add tokens to crosschain mapping\\n     * @param newTokenManager address of token manager contract\\n     */\\n    function setTokenManager(address newTokenManager) external onlyOwner {\\n        require(newTokenManager != address(0), \\\"BR: ZERO_ADDRESS\\\");\\n        _tokenManager = IBridgeTokenManager(newTokenManager);\\n    }\\n\\n    /**\\n     * @notice Get the address of contract set as token manager\\n     * @return The address of token manager contract\\n     */\\n    function tokenManagerAddress() external view returns (address) {\\n        return address(_tokenManager);\\n    }\\n\\n    /**\\n     * @notice Set the cosigner manager, callable only by cosigners\\n     * @dev This should be the contract responsible for sign by behalf of the payloads\\n     * @param newCosignerManager address of cosigner manager contract\\n     */\\n    function setCosignerManager(address newCosignerManager) external onlyOwner {\\n        require(newCosignerManager != address(0), \\\"BR: ZERO_ADDRESS\\\");\\n        _cosignerManager = IBridgeCosignerManager(newCosignerManager);\\n    }\\n\\n    /**\\n     * @notice Get the address of contract set as cosigner manager\\n     * @return The address of cosigner manager contract\\n     */\\n    function cosignerManagerAddress() external view returns (address) {\\n        return address(_cosignerManager);\\n    }\\n\\n    // enter amount of tokens to protocol\\n    function enter(address token, uint256 amount)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(token != address(0), \\\"BR: ZERO_ADDRESS\\\");\\n        require(amount != 0, \\\"BR: ZERO_AMOUNT\\\");\\n\\n        (IBridgeTokenManager.Token memory tokenData, bool ok) = _tokenManager\\n            .fetch(token, _chainId);\\n        require(ok, \\\"BR: TOKEN_NOT_LISTED\\\");\\n        enterProcess(tokenData, amount);\\n\\n        emitEnter(token, _msgSender(), amount);\\n    }\\n\\n    // enter amount of system currency to protocol\\n    function enterETH() external payable nonReentrant whenNotPaused {\\n        require(msg.value != 0, \\\"BR: ZERO_AMOUNT\\\");\\n        (, bool ok) = _tokenManager.fetch(address(0), _chainId);\\n        require(ok, \\\"BR: TOKEN_NOT_LISTED\\\");\\n\\n        emitEnter(address(0), _msgSender(), msg.value);\\n    }\\n\\n    // exit amount of tokens from protocol\\n    function exit(bytes calldata data, bytes[] calldata signatures)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        RLPReader.RLPItem[] memory logRLPList = data.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == ENTER_EVENT_SIG, // topic0 is event sig\\n            \\\"BR: INVALID_EVT\\\"\\n        );\\n\\n        address exitToken = logTopicRLPList[1].toAddress();\\n        address to = logTopicRLPList[2].toAddress();\\n        require(to == _msgSender(), \\\"BR: NOT_ONWER\\\");\\n\\n        uint256 amount = logRLPList[2].toUint();\\n        require(amount != 0, \\\"BR: ZERO_AMOUNT\\\");\\n\\n        uint256 extChainId = logRLPList[3].toUint();\\n        require(extChainId != _chainId, \\\"BR: WRONG_CHAIN\\\");\\n\\n        // protected from replay on another network\\n        bytes32 commitment = keccak256(\\n            abi.encodePacked(data, _calculateDomainSeparator(_name, _chainId))\\n        );\\n\\n        require(!_commitments[commitment], \\\"BR: COMMITMENT_KNOWN\\\");\\n        require(\\n            _cosignerManager.verify(commitment, extChainId, signatures),\\n            \\\"BR: INVALID_SIGNATURES\\\"\\n        );\\n\\n        _commitments[commitment] = true;\\n\\n        (IBridgeTokenManager.Token memory enterToken, bool ok) = _tokenManager\\n            .fetch(exitToken, extChainId);\\n        require(ok, \\\"BR: TOKEN_NOT_LISTED\\\");\\n\\n        exitProcess(enterToken, to, amount);\\n        emitExit(enterToken.addr, to, commitment, amount);\\n    }\\n\\n    // ===== impl =====\\n\\n    function enterProcess(\\n        IBridgeTokenManager.Token memory tokenData,\\n        uint256 amount\\n    ) internal override {\\n        if (tokenData.issueType == IBridgeTokenManager.IssueType.MINTABLE) {\\n            IBridgeToken(tokenData.addr).burn(_msgSender(), amount);\\n        } else if (\\n            tokenData.issueType == IBridgeTokenManager.IssueType.DEFAULT\\n        ) {\\n            IERC20(tokenData.addr).transferFrom(\\n                _msgSender(),\\n                address(this),\\n                amount\\n            );\\n        } else {\\n            // in case not correct choise, should not occur\\n            assert(false);\\n        }\\n    }\\n\\n    function exitProcess(\\n        IBridgeTokenManager.Token memory tokenData,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        if (tokenData.addr == address(0)) {\\n            unsafeTransfer(to, amount);\\n        } else if (\\n            tokenData.issueType == IBridgeTokenManager.IssueType.MINTABLE\\n        ) {\\n            IBridgeToken(tokenData.addr).mint(to, amount);\\n        } else if (\\n            tokenData.issueType == IBridgeTokenManager.IssueType.DEFAULT\\n        ) {\\n            IERC20(tokenData.addr).transfer(to, amount);\\n        } else {\\n            // in case not correct choise, should not occur\\n            assert(false);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc88279b92597bafad7c5b8af4607d57b75d2a094057a3e7b5ae4202174bff473\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeCosignerManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBridgeCosignerManager {\\n    event CosignerAdded(address indexed cosaddr, uint256 chainId);\\n    event CosignerRemoved(address indexed cosaddr, uint256 chainId);\\n    struct Cosigner {\\n        address addr;\\n        uint256 chainId;\\n        uint256 index;\\n        bool active;\\n    }\\n\\n    function addCosigner(address cosaddr, uint256 chainId) external;\\n\\n    function addCosignerBatch(address[] calldata cosaddrs, uint256 chainId)\\n        external;\\n\\n    function removeCosigner(address cosaddr) external;\\n\\n    function removeCosignerBatch(address[] calldata cosaddrs) external;\\n\\n    function getCosigners(uint256 chainId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getCosignCount(uint256 chainId) external view returns (uint8);\\n\\n    function verify(\\n        bytes32 commitment,\\n        uint256 chainId,\\n        bytes[] calldata signatures\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfabdd8ef3a89d2a7a561c731347028ccdb596e05154054c61e51908f402b0dde\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBridgeToken is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2fcef94e226e6c3f3c4be1145ccaa6211eac01448fb0bb61fc0296d90583190a\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBridgeTokenManager {\\n    event LinkAdded(Link indexed link);\\n    event LinkRemoved(Link indexed link);\\n\\n    enum IssueType {\\n        DEFAULT,\\n        MINTABLE\\n    }\\n\\n    struct Token {\\n        address addr;\\n        IssueType issueType;\\n        uint256 chainId;\\n    }\\n\\n    struct Link {\\n        Token enterToken;\\n        Token exitToken;\\n        bool exist;\\n    }\\n\\n    function issue(\\n        address[] calldata tokens,\\n        IssueType[] calldata issueTypes,\\n        uint256[] calldata chainIds\\n    ) external;\\n\\n    function revoke(address addr, uint256 chainId) external;\\n\\n    function fetch(address addr, uint256 chainId)\\n        external\\n        view\\n        returns (Token memory token, bool ok);\\n}\\n\",\"keccak256\":\"0xfc00cd65693c6c686be13448efae32c5a593048bd572608aca7268123c3bd63e\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd1f7e0d61a7a58ab4b8d5eb0116fab6ca88dddd497a8ba4f8576141ed90246cf\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x8f559d34b550babeca68580b00d0544481b9f0349326891af2d3db25af278b25\",\"license\":\"MIT\"},\"contracts/library/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n        internal\\n        pure\\n        returns (Iterator memory)\\n    {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x082636e1e83173379251205fb69fb87c9b74db93331fccb74d5b458cf285737d\",\"license\":\"MIT\"},\"contracts/versions/Version0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/**\\n * @title Version0\\n * @notice Version getter for contracts\\n **/\\ncontract Version0 {\\n    uint8 public constant VERSION = 0;\\n}\\n\",\"keccak256\":\"0x5f886e6ab076b7dbea9e4ab4d7084d94e2d643c61dc353334293192d33156851\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613bd3806100206000396000f3fe6080604052600436106100fe5760003560e01c80637e348b7d11610095578063b3e56d7911610064578063b3e56d79146102e9578063bc4c594b146102f3578063e096c01c1461031e578063f2fde38b14610349578063ffa1ad7414610372576100fe565b80637e348b7d146102435780638da5cb5b1461026c578063ae8f4f3a14610297578063b0c8bd04146102c0576100fe565b80634b72c5da116100d15780634b72c5da146101ad5780635c975abb146101d8578063715018a6146102035780637cb2b79c1461021a576100fe565b80630951d6d8146101035780633408e4701461012e5780633644e51514610159578063463fd1af14610184575b600080fd5b34801561010f57600080fd5b5061011861039d565b60405161012591906133df565b60405180910390f35b34801561013a57600080fd5b506101436103a3565b60405161015091906133df565b60405180910390f35b34801561016557600080fd5b5061016e6103ad565b60405161017b9190613151565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a69190612c37565b6103b3565b005b3480156101b957600080fd5b506101c26105e8565b6040516101cf91906133df565b60405180910390f35b3480156101e457600080fd5b506101ed6105ee565b6040516101fa9190613136565b60405180910390f35b34801561020f57600080fd5b50610218610605565b005b34801561022657600080fd5b50610241600480360381019061023c9190612b34565b61068d565b005b34801561024f57600080fd5b5061026a60048036038101906102659190612b5d565b6107bd565b005b34801561027857600080fd5b50610281610a27565b60405161028e91906130bb565b60405180910390f35b3480156102a357600080fd5b506102be60048036038101906102b99190612bc2565b610a51565b005b3480156102cc57600080fd5b506102e760048036038101906102e29190612b34565b6111d9565b005b6102f1611309565b005b3480156102ff57600080fd5b506103086114f6565b60405161031591906130bb565b60405180910390f35b34801561032a57600080fd5b50610333611520565b60405161034091906130bb565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190612b34565b61154a565b005b34801561037e57600080fd5b50610387611642565b6040516103949190613484565b60405180910390f35b6126fc81565b600060ce54905090565b60cf5481565b600060019054906101000a900460ff16806103d9575060008054906101000a900460ff16155b610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f906132df565b60405180910390fd5b60008060019054906101000a900460ff161590508015610468576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8360cd908051906020019061047e929190612873565b508260cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504660ce5561059b60cd8054610515906136f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610541906136f1565b801561058e5780601f106105635761010080835404028352916020019161058e565b820191906000526020600020905b81548152906001019060200180831161057157829003601f168201915b505050505060ce54611647565b60cf819055506105a96116ce565b6105b16117a7565b6105b9611890565b6105c1611984565b80156105e25760008060016101000a81548160ff0219169083151502179055505b50505050565b61271081565b6000609760009054906101000a900460ff16905090565b61060d611a65565b73ffffffffffffffffffffffffffffffffffffffff1661062b610a27565b73ffffffffffffffffffffffffffffffffffffffff1614610681576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106789061331f565b60405180910390fd5b61068b6000611a6d565b565b610695611a65565b73ffffffffffffffffffffffffffffffffffffffff166106b3610a27565b73ffffffffffffffffffffffffffffffffffffffff1614610709576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107009061331f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610779576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610770906132ff565b60405180910390fd5b8060cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026065541415610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa9061339f565b60405180910390fd5b60026065819055506108136105ee565b15610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a9061329f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba906132ff565b60405180910390fd5b6000811415610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe9061335f565b60405180910390fd5b60008060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de5ed0978560ce546040518363ffffffff1660e01b815260040161096992919061310d565b60806040518083038186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b99190612c9e565b91509150806109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f49061327f565b60405180910390fd5b610a078284611b33565b610a1984610a13611a65565b85611d84565b505060016065819055505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026065541415610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e9061339f565b60405180910390fd5b6002606581905550610aa76105ee565b15610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade9061329f565b60405180910390fd5b6000610b3e610b3986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611f1f565b611f4d565b90506000610b8c82600181518110610b7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611f4d565b90507f8768ce3eb0f861546d72ab070051c92f38a4fc7cf8e3579c42d2d57f09065fcc610bf982600081518110610bec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516120ae565b60001b14610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c33906133bf565b60405180910390fd5b6000610c8882600181518110610c7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612108565b90506000610cd683600281518110610cc9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612108565b9050610ce0611a65565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d44906131ff565b60405180910390fd5b6000610d9985600281518110610d8c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516120ae565b90506000811415610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd69061335f565b60405180910390fd5b6000610e2b86600381518110610e1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516120ae565b905060ce54811415610e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e69906132bf565b60405180910390fd5b60008a8a610f0c60cd8054610e86906136f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb2906136f1565b8015610eff5780601f10610ed457610100808354040283529160200191610eff565b820191906000526020600020905b815481529060010190602001808311610ee257829003601f168201915b505050505060ce54611647565b604051602001610f1e93929190613061565b60405160208183030381529060405280519060200120905060ca600082815260200190815260200160002060009054906101000a900460ff1615610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e9061337f565b60405180910390fd5b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e6e8f6882848c8c6040518563ffffffff1660e01b8152600401610ff894939291906131bf565b60206040518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190612b99565b611087576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107e9061323f565b60405180910390fd5b600160ca600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060008060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de5ed09788866040518363ffffffff1660e01b815260040161111392919061310d565b60806040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612c9e565b91509150806111a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119e9061327f565b60405180910390fd5b6111b282878761212b565b6111c282600001518785886123b6565b505050505050505050600160658190555050505050565b6111e1611a65565b73ffffffffffffffffffffffffffffffffffffffff166111ff610a27565b73ffffffffffffffffffffffffffffffffffffffff1614611255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c9061331f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bc906132ff565b60405180910390fd5b8060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6002606554141561134f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113469061339f565b60405180910390fd5b600260658190555061135f6105ee565b1561139f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113969061329f565b60405180910390fd5b60003414156113e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113da9061335f565b60405180910390fd5b600060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de5ed097600060ce546040518363ffffffff1660e01b815260040161144592919061310d565b60806040518083038186803b15801561145d57600080fd5b505afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114959190612c9e565b915050806114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cf9061327f565b60405180910390fd5b6114eb60006114e5611a65565b34611d84565b506001606581905550565b600060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611552611a65565b73ffffffffffffffffffffffffffffffffffffffff16611570610a27565b73ffffffffffffffffffffffffffffffffffffffff16146115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd9061331f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162d9061321f565b60405180910390fd5b61163f81611a6d565b50565b600081565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8380519060200120600060405160200161168491906130a0565b6040516020818303038152906040528051906020012084306040516020016116b095949392919061316c565b60405160208183030381529060405280519060200120905092915050565b600060019054906101000a900460ff16806116f4575060008054906101000a900460ff16155b611733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172a906132df565b60405180910390fd5b60008060019054906101000a900460ff161590508015611783576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156117a45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806117cd575060008054906101000a900460ff16155b61180c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611803906132df565b60405180910390fd5b60008060019054906101000a900460ff16159050801561185c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61186c611867611a65565b611a6d565b801561188d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806118b6575060008054906101000a900460ff16155b6118f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ec906132df565b60405180910390fd5b60008060019054906101000a900460ff161590508015611945576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000609760006101000a81548160ff02191690831515021790555080156119815760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806119aa575060008054906101000a900460ff16155b6119e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e0906132df565b60405180910390fd5b60008060019054906101000a900460ff161590508015611a39576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60016065819055508015611a625760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600180811115611b6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82602001516001811115611ba9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611c2c57816000015173ffffffffffffffffffffffffffffffffffffffff16639dc29fac611bd7611a65565b836040518363ffffffff1660e01b8152600401611bf592919061310d565b600060405180830381600087803b158015611c0f57600080fd5b505af1158015611c23573d6000803e3d6000fd5b50505050611d80565b60006001811115611c66577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82602001516001811115611ca3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611d4957816000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd611cd1611a65565b30846040518463ffffffff1660e01b8152600401611cf1939291906130d6565b602060405180830381600087803b158015611d0b57600080fd5b505af1158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d439190612b99565b50611d7f565b6000611d7e577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5b5b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8768ce3eb0f861546d72ab070051c92f38a4fc7cf8e3579c42d2d57f09065fcc8360c960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460ce54611ead60cd8054611e27906136f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611e53906136f1565b8015611ea05780601f10611e7557610100808354040283529160200191611ea0565b820191906000526020600020905b815481529060010190602001808311611e8357829003601f168201915b505050505060ce54611647565b604051611ebd949392919061343f565b60405180910390a360c960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611f1590613754565b9190505550505050565b611f276128f9565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060611f58826124be565b611f6157600080fd5b6000611f6c8361250c565b905060008167ffffffffffffffff811115611fb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611fe957816020015b611fd66128f9565b815260200190600190039081611fce5790505b5090506000611ffb856020015161259a565b856020015161200a91906135a1565b9050600080600090505b848110156120a15761202583612659565b9150604051806040016040528083815260200184815250848281518110612075577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250818361208c91906135a1565b9250808061209990613754565b915050612014565b5082945050505050919050565b60008082600001511180156120c857506021826000015111155b6120d157600080fd5b6000806120dd84612735565b9150915060008251905060208210156120fd57816020036101000a810490505b809350505050919050565b6000601582600001511461211b57600080fd5b612124826120ae565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614156121735761216e828261277f565b6123b1565b6001808111156121ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b836020015160018111156121e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561226557826000015173ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b815260040161222e92919061310d565b600060405180830381600087803b15801561224857600080fd5b505af115801561225c573d6000803e3d6000fd5b505050506123b0565b6000600181111561229f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b836020015160018111156122dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561237957826000015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161232192919061310d565b602060405180830381600087803b15801561233b57600080fd5b505af115801561234f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123739190612b99565b506123af565b60006123ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5b5b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f5d8bb8b1c9cddb5cbca41d7b864677808f93d7f6f0fc21d4ea91bb3fd6e5b5ee838560ce546124a060cd805461241a906136f1565b80601f0160208091040260200160405190810160405280929190818152602001828054612446906136f1565b80156124935780601f1061246857610100808354040283529160200191612493565b820191906000526020600020905b81548152906001019060200180831161247657829003601f168201915b505050505060ce54611647565b6040516124b094939291906133fa565b60405180910390a350505050565b600080826000015114156124d55760009050612507565b60008083602001519050805160001a915060c060ff168260ff16101561250057600092505050612507565b6001925050505b919050565b600080826000015114156125235760009050612595565b600080612533846020015161259a565b846020015161254291906135a1565b905060008460000151856020015161255a91906135a1565b90505b8082101561258e5761256e82612659565b8261257991906135a1565b9150828061258690613754565b93505061255d565b8293505050505b919050565b600080825160001a9050608060ff168110156125ba576000915050612654565b60b860ff168110806125df575060c060ff1681101580156125de575060f860ff1681105b5b156125ee576001915050612654565b60c060ff168110156126295760018060b8612609919061362b565b60ff168261261791906135f7565b61262191906135a1565b915050612654565b60018060f8612638919061362b565b60ff168261264691906135f7565b61265091906135a1565b9150505b919050565b6000806000835160001a9050608060ff1681101561267a576001915061272b565b60b860ff168110156126a9576001608060ff168261269891906135f7565b6126a291906135a1565b915061272a565b60c060ff168110156126d95760b78103600185019450806020036101000a85510460018201810193505050612729565b60f860ff1681101561270857600160c060ff16826126f791906135f7565b61270191906135a1565b9150612728565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b6000806000612747846020015161259a565b9050600081856020015161275b91906135a1565b9050600082866000015161276f91906135f7565b9050818194509450505050915091565b804710156127c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b99061333f565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516127e89061308b565b60006040518083038185875af1925050503d8060008114612825576040519150601f19603f3d011682016040523d82523d6000602084013e61282a565b606091505b505090508061286e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128659061325f565b60405180910390fd5b505050565b82805461287f906136f1565b90600052602060002090601f0160209004810192826128a157600085556128e8565b82601f106128ba57805160ff19168380011785556128e8565b828001600101855582156128e8579182015b828111156128e75782518255916020019190600101906128cc565b5b5090506128f59190612913565b5090565b604051806040016040528060008152602001600081525090565b5b8082111561292c576000816000905550600101612914565b5090565b600061294361293e846134c4565b61349f565b90508281526020810184848401111561295b57600080fd5b6129668482856136e2565b509392505050565b60008135905061297d81613b1a565b92915050565b60008151905061299281613b1a565b92915050565b60008083601f8401126129aa57600080fd5b8235905067ffffffffffffffff8111156129c357600080fd5b6020830191508360208202830111156129db57600080fd5b9250929050565b6000815190506129f181613b31565b92915050565b60008083601f840112612a0957600080fd5b8235905067ffffffffffffffff811115612a2257600080fd5b602083019150836001820283011115612a3a57600080fd5b9250929050565b600081359050612a5081613b48565b92915050565b600081359050612a6581613b5f565b92915050565b600081519050612a7a81613b76565b92915050565b600082601f830112612a9157600080fd5b8135612aa1848260208601612930565b91505092915050565b600060608284031215612abc57600080fd5b612ac6606061349f565b90506000612ad684828501612983565b6000830152506020612aea84828501612a6b565b6020830152506040612afe84828501612b1f565b60408301525092915050565b600081359050612b1981613b86565b92915050565b600081519050612b2e81613b86565b92915050565b600060208284031215612b4657600080fd5b6000612b548482850161296e565b91505092915050565b60008060408385031215612b7057600080fd5b6000612b7e8582860161296e565b9250506020612b8f85828601612b0a565b9150509250929050565b600060208284031215612bab57600080fd5b6000612bb9848285016129e2565b91505092915050565b60008060008060408587031215612bd857600080fd5b600085013567ffffffffffffffff811115612bf257600080fd5b612bfe878288016129f7565b9450945050602085013567ffffffffffffffff811115612c1d57600080fd5b612c2987828801612998565b925092505092959194509250565b600080600060608486031215612c4c57600080fd5b600084013567ffffffffffffffff811115612c6657600080fd5b612c7286828701612a80565b9350506020612c8386828701612a41565b9250506040612c9486828701612a56565b9150509250925092565b60008060808385031215612cb157600080fd5b6000612cbf85828601612aaa565b9250506060612cd0858286016129e2565b9150509250929050565b6000612ce7848484612daa565b90509392505050565b612cf98161365f565b82525050565b6000612d0b838561350c565b935083602084028501612d1d846134f5565b8060005b87811015612d63578484038952612d38828461354a565b612d43868284612cda565b9550612d4e846134ff565b935060208b019a505050600181019050612d21565b50829750879450505050509392505050565b612d7e81613671565b82525050565b612d8d8161367d565b82525050565b612da4612d9f8261367d565b61379d565b82525050565b6000612db6838561351d565b9350612dc38385846136e2565b612dcc83613846565b840190509392505050565b6000612de3838561352e565b9350612df08385846136e2565b82840190509392505050565b6000612e09600d83613539565b9150612e1482613864565b602082019050919050565b6000612e2c602683613539565b9150612e378261388d565b604082019050919050565b6000612e4f601683613539565b9150612e5a826138dc565b602082019050919050565b6000612e72600f83613539565b9150612e7d82613905565b602082019050919050565b6000612e95601483613539565b9150612ea08261392e565b602082019050919050565b6000612eb8601083613539565b9150612ec382613957565b602082019050919050565b6000612edb600f83613539565b9150612ee682613980565b602082019050919050565b6000612efe602e83613539565b9150612f09826139a9565b604082019050919050565b6000612f21601083613539565b9150612f2c826139f8565b602082019050919050565b6000612f44602083613539565b9150612f4f82613a21565b602082019050919050565b6000612f67601883613539565b9150612f7282613a4a565b602082019050919050565b6000612f8a600f83613539565b9150612f9582613a73565b602082019050919050565b6000612fad60008361352e565b9150612fb882613a9c565b600082019050919050565b6000612fd0601483613539565b9150612fdb82613a9f565b602082019050919050565b6000612ff3601f83613539565b9150612ffe82613ac8565b602082019050919050565b6000613016600f83613539565b915061302182613af1565b602082019050919050565b613035816136cb565b82525050565b613044816136d5565b82525050565b61305b613056826136d5565b6137a7565b82525050565b600061306e828587612dd7565b915061307a8284612d93565b602082019150819050949350505050565b600061309682612fa0565b9150819050919050565b60006130ac828461304a565b60018201915081905092915050565b60006020820190506130d06000830184612cf0565b92915050565b60006060820190506130eb6000830186612cf0565b6130f86020830185612cf0565b613105604083018461302c565b949350505050565b60006040820190506131226000830185612cf0565b61312f602083018461302c565b9392505050565b600060208201905061314b6000830184612d75565b92915050565b60006020820190506131666000830184612d84565b92915050565b600060a0820190506131816000830188612d84565b61318e6020830187612d84565b61319b6040830186612d84565b6131a8606083018561302c565b6131b56080830184612cf0565b9695505050505050565b60006060820190506131d46000830187612d84565b6131e1602083018661302c565b81810360408301526131f4818486612cff565b905095945050505050565b6000602082019050818103600083015261321881612dfc565b9050919050565b6000602082019050818103600083015261323881612e1f565b9050919050565b6000602082019050818103600083015261325881612e42565b9050919050565b6000602082019050818103600083015261327881612e65565b9050919050565b6000602082019050818103600083015261329881612e88565b9050919050565b600060208201905081810360008301526132b881612eab565b9050919050565b600060208201905081810360008301526132d881612ece565b9050919050565b600060208201905081810360008301526132f881612ef1565b9050919050565b6000602082019050818103600083015261331881612f14565b9050919050565b6000602082019050818103600083015261333881612f37565b9050919050565b6000602082019050818103600083015261335881612f5a565b9050919050565b6000602082019050818103600083015261337881612f7d565b9050919050565b6000602082019050818103600083015261339881612fc3565b9050919050565b600060208201905081810360008301526133b881612fe6565b9050919050565b600060208201905081810360008301526133d881613009565b9050919050565b60006020820190506133f4600083018461302c565b92915050565b600060808201905061340f600083018761302c565b61341c6020830186612d84565b613429604083018561302c565b6134366060830184612d84565b95945050505050565b6000608082019050613454600083018761302c565b613461602083018661302c565b61346e604083018561302c565b61347b6060830184612d84565b95945050505050565b6000602082019050613499600083018461303b565b92915050565b60006134a96134ba565b90506134b58282613723565b919050565b6000604051905090565b600067ffffffffffffffff8211156134df576134de613817565b5b6134e882613846565b9050602081019050919050565b6000819050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000808335600160200384360303811261356357600080fd5b83810192508235915060208301925067ffffffffffffffff82111561358757600080fd5b60018202360384131561359957600080fd5b509250929050565b60006135ac826136cb565b91506135b7836136cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156135ec576135eb6137b9565b5b828201905092915050565b6000613602826136cb565b915061360d836136cb565b9250828210156136205761361f6137b9565b5b828203905092915050565b6000613636826136d5565b9150613641836136d5565b925082821015613654576136536137b9565b5b828203905092915050565b600061366a826136ab565b9050919050565b60008115159050919050565b6000819050919050565b60006136928261365f565b9050919050565b60006136a48261365f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b6000600282049050600182168061370957607f821691505b6020821081141561371d5761371c6137e8565b5b50919050565b61372c82613846565b810181811067ffffffffffffffff8211171561374b5761374a613817565b5b80604052505050565b600061375f826136cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613792576137916137b9565b5b600182019050919050565b6000819050919050565b60006137b282613857565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160f81b9050919050565b7f42523a204e4f545f4f4e57455200000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f42523a20494e56414c49445f5349474e41545552455300000000000000000000600082015250565b7f42523a2053454e445f5245564552540000000000000000000000000000000000600082015250565b7f42523a20544f4b454e5f4e4f545f4c4953544544000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f42523a2057524f4e475f434841494e0000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f42523a205a45524f5f4144445245535300000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42523a20494e53554646494349454e545f42414c414e43450000000000000000600082015250565b7f42523a205a45524f5f414d4f554e540000000000000000000000000000000000600082015250565b50565b7f42523a20434f4d4d49544d454e545f4b4e4f574e000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f42523a20494e56414c49445f4556540000000000000000000000000000000000600082015250565b613b238161365f565b8114613b2e57600080fd5b50565b613b3a81613671565b8114613b4557600080fd5b50565b613b5181613687565b8114613b5c57600080fd5b50565b613b6881613699565b8114613b7357600080fd5b50565b60028110613b8357600080fd5b50565b613b8f816136cb565b8114613b9a57600080fd5b5056fea2646970667358221220aa01c16bd038db74b148fe3766945de4fadd18da265b4ad05492a2a8df61bc8764736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100fe5760003560e01c80637e348b7d11610095578063b3e56d7911610064578063b3e56d79146102e9578063bc4c594b146102f3578063e096c01c1461031e578063f2fde38b14610349578063ffa1ad7414610372576100fe565b80637e348b7d146102435780638da5cb5b1461026c578063ae8f4f3a14610297578063b0c8bd04146102c0576100fe565b80634b72c5da116100d15780634b72c5da146101ad5780635c975abb146101d8578063715018a6146102035780637cb2b79c1461021a576100fe565b80630951d6d8146101035780633408e4701461012e5780633644e51514610159578063463fd1af14610184575b600080fd5b34801561010f57600080fd5b5061011861039d565b60405161012591906133df565b60405180910390f35b34801561013a57600080fd5b506101436103a3565b60405161015091906133df565b60405180910390f35b34801561016557600080fd5b5061016e6103ad565b60405161017b9190613151565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a69190612c37565b6103b3565b005b3480156101b957600080fd5b506101c26105e8565b6040516101cf91906133df565b60405180910390f35b3480156101e457600080fd5b506101ed6105ee565b6040516101fa9190613136565b60405180910390f35b34801561020f57600080fd5b50610218610605565b005b34801561022657600080fd5b50610241600480360381019061023c9190612b34565b61068d565b005b34801561024f57600080fd5b5061026a60048036038101906102659190612b5d565b6107bd565b005b34801561027857600080fd5b50610281610a27565b60405161028e91906130bb565b60405180910390f35b3480156102a357600080fd5b506102be60048036038101906102b99190612bc2565b610a51565b005b3480156102cc57600080fd5b506102e760048036038101906102e29190612b34565b6111d9565b005b6102f1611309565b005b3480156102ff57600080fd5b506103086114f6565b60405161031591906130bb565b60405180910390f35b34801561032a57600080fd5b50610333611520565b60405161034091906130bb565b60405180910390f35b34801561035557600080fd5b50610370600480360381019061036b9190612b34565b61154a565b005b34801561037e57600080fd5b50610387611642565b6040516103949190613484565b60405180910390f35b6126fc81565b600060ce54905090565b60cf5481565b600060019054906101000a900460ff16806103d9575060008054906101000a900460ff16155b610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f906132df565b60405180910390fd5b60008060019054906101000a900460ff161590508015610468576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b8360cd908051906020019061047e929190612873565b508260cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508160cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055504660ce5561059b60cd8054610515906136f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610541906136f1565b801561058e5780601f106105635761010080835404028352916020019161058e565b820191906000526020600020905b81548152906001019060200180831161057157829003601f168201915b505050505060ce54611647565b60cf819055506105a96116ce565b6105b16117a7565b6105b9611890565b6105c1611984565b80156105e25760008060016101000a81548160ff0219169083151502179055505b50505050565b61271081565b6000609760009054906101000a900460ff16905090565b61060d611a65565b73ffffffffffffffffffffffffffffffffffffffff1661062b610a27565b73ffffffffffffffffffffffffffffffffffffffff1614610681576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106789061331f565b60405180910390fd5b61068b6000611a6d565b565b610695611a65565b73ffffffffffffffffffffffffffffffffffffffff166106b3610a27565b73ffffffffffffffffffffffffffffffffffffffff1614610709576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107009061331f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610779576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610770906132ff565b60405180910390fd5b8060cc60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60026065541415610803576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fa9061339f565b60405180910390fd5b60026065819055506108136105ee565b15610853576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084a9061329f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156108c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108ba906132ff565b60405180910390fd5b6000811415610907576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fe9061335f565b60405180910390fd5b60008060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de5ed0978560ce546040518363ffffffff1660e01b815260040161096992919061310d565b60806040518083038186803b15801561098157600080fd5b505afa158015610995573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b99190612c9e565b91509150806109fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f49061327f565b60405180910390fd5b610a078284611b33565b610a1984610a13611a65565b85611d84565b505060016065819055505050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60026065541415610a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a8e9061339f565b60405180910390fd5b6002606581905550610aa76105ee565b15610ae7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ade9061329f565b60405180910390fd5b6000610b3e610b3986868080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050611f1f565b611f4d565b90506000610b8c82600181518110610b7f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151611f4d565b90507f8768ce3eb0f861546d72ab070051c92f38a4fc7cf8e3579c42d2d57f09065fcc610bf982600081518110610bec577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516120ae565b60001b14610c3c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c33906133bf565b60405180910390fd5b6000610c8882600181518110610c7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612108565b90506000610cd683600281518110610cc9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612108565b9050610ce0611a65565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610d4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d44906131ff565b60405180910390fd5b6000610d9985600281518110610d8c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516120ae565b90506000811415610ddf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dd69061335f565b60405180910390fd5b6000610e2b86600381518110610e1e577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516120ae565b905060ce54811415610e72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e69906132bf565b60405180910390fd5b60008a8a610f0c60cd8054610e86906136f1565b80601f0160208091040260200160405190810160405280929190818152602001828054610eb2906136f1565b8015610eff5780601f10610ed457610100808354040283529160200191610eff565b820191906000526020600020905b815481529060010190602001808311610ee257829003601f168201915b505050505060ce54611647565b604051602001610f1e93929190613061565b60405160208183030381529060405280519060200120905060ca600082815260200190815260200160002060009054906101000a900460ff1615610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e9061337f565b60405180910390fd5b60cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16633e6e8f6882848c8c6040518563ffffffff1660e01b8152600401610ff894939291906131bf565b60206040518083038186803b15801561101057600080fd5b505afa158015611024573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110489190612b99565b611087576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107e9061323f565b60405180910390fd5b600160ca600083815260200190815260200160002060006101000a81548160ff02191690831515021790555060008060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de5ed09788866040518363ffffffff1660e01b815260040161111392919061310d565b60806040518083038186803b15801561112b57600080fd5b505afa15801561113f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111639190612c9e565b91509150806111a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119e9061327f565b60405180910390fd5b6111b282878761212b565b6111c282600001518785886123b6565b505050505050505050600160658190555050505050565b6111e1611a65565b73ffffffffffffffffffffffffffffffffffffffff166111ff610a27565b73ffffffffffffffffffffffffffffffffffffffff1614611255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124c9061331f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bc906132ff565b60405180910390fd5b8060cb60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6002606554141561134f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113469061339f565b60405180910390fd5b600260658190555061135f6105ee565b1561139f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113969061329f565b60405180910390fd5b60003414156113e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113da9061335f565b60405180910390fd5b600060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663de5ed097600060ce546040518363ffffffff1660e01b815260040161144592919061310d565b60806040518083038186803b15801561145d57600080fd5b505afa158015611471573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114959190612c9e565b915050806114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cf9061327f565b60405180910390fd5b6114eb60006114e5611a65565b34611d84565b506001606581905550565b600060cc60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600060cb60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b611552611a65565b73ffffffffffffffffffffffffffffffffffffffff16611570610a27565b73ffffffffffffffffffffffffffffffffffffffff16146115c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115bd9061331f565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611636576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162d9061321f565b60405180910390fd5b61163f81611a6d565b50565b600081565b60007f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f8380519060200120600060405160200161168491906130a0565b6040516020818303038152906040528051906020012084306040516020016116b095949392919061316c565b60405160208183030381529060405280519060200120905092915050565b600060019054906101000a900460ff16806116f4575060008054906101000a900460ff16155b611733576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172a906132df565b60405180910390fd5b60008060019054906101000a900460ff161590508015611783576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156117a45760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806117cd575060008054906101000a900460ff16155b61180c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611803906132df565b60405180910390fd5b60008060019054906101000a900460ff16159050801561185c576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61186c611867611a65565b611a6d565b801561188d5760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806118b6575060008054906101000a900460ff16155b6118f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ec906132df565b60405180910390fd5b60008060019054906101000a900460ff161590508015611945576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b6000609760006101000a81548160ff02191690831515021790555080156119815760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806119aa575060008054906101000a900460ff16155b6119e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e0906132df565b60405180910390fd5b60008060019054906101000a900460ff161590508015611a39576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b60016065819055508015611a625760008060016101000a81548160ff0219169083151502179055505b50565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600180811115611b6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82602001516001811115611ba9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611c2c57816000015173ffffffffffffffffffffffffffffffffffffffff16639dc29fac611bd7611a65565b836040518363ffffffff1660e01b8152600401611bf592919061310d565b600060405180830381600087803b158015611c0f57600080fd5b505af1158015611c23573d6000803e3d6000fd5b50505050611d80565b60006001811115611c66577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b82602001516001811115611ca3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611d4957816000015173ffffffffffffffffffffffffffffffffffffffff166323b872dd611cd1611a65565b30846040518463ffffffff1660e01b8152600401611cf1939291906130d6565b602060405180830381600087803b158015611d0b57600080fd5b505af1158015611d1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d439190612b99565b50611d7f565b6000611d7e577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5b5b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8768ce3eb0f861546d72ab070051c92f38a4fc7cf8e3579c42d2d57f09065fcc8360c960008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205460ce54611ead60cd8054611e27906136f1565b80601f0160208091040260200160405190810160405280929190818152602001828054611e53906136f1565b8015611ea05780601f10611e7557610100808354040283529160200191611ea0565b820191906000526020600020905b815481529060010190602001808311611e8357829003601f168201915b505050505060ce54611647565b604051611ebd949392919061343f565b60405180910390a360c960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000815480929190611f1590613754565b9190505550505050565b611f276128f9565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060611f58826124be565b611f6157600080fd5b6000611f6c8361250c565b905060008167ffffffffffffffff811115611fb0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611fe957816020015b611fd66128f9565b815260200190600190039081611fce5790505b5090506000611ffb856020015161259a565b856020015161200a91906135a1565b9050600080600090505b848110156120a15761202583612659565b9150604051806040016040528083815260200184815250848281518110612075577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181905250818361208c91906135a1565b9250808061209990613754565b915050612014565b5082945050505050919050565b60008082600001511180156120c857506021826000015111155b6120d157600080fd5b6000806120dd84612735565b9150915060008251905060208210156120fd57816020036101000a810490505b809350505050919050565b6000601582600001511461211b57600080fd5b612124826120ae565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff16836000015173ffffffffffffffffffffffffffffffffffffffff1614156121735761216e828261277f565b6123b1565b6001808111156121ac577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b836020015160018111156121e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561226557826000015173ffffffffffffffffffffffffffffffffffffffff166340c10f1983836040518363ffffffff1660e01b815260040161222e92919061310d565b600060405180830381600087803b15801561224857600080fd5b505af115801561225c573d6000803e3d6000fd5b505050506123b0565b6000600181111561229f577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b836020015160018111156122dc577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b141561237957826000015173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b815260040161232192919061310d565b602060405180830381600087803b15801561233b57600080fd5b505af115801561234f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123739190612b99565b506123af565b60006123ae577f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b5b5b5b505050565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f5d8bb8b1c9cddb5cbca41d7b864677808f93d7f6f0fc21d4ea91bb3fd6e5b5ee838560ce546124a060cd805461241a906136f1565b80601f0160208091040260200160405190810160405280929190818152602001828054612446906136f1565b80156124935780601f1061246857610100808354040283529160200191612493565b820191906000526020600020905b81548152906001019060200180831161247657829003601f168201915b505050505060ce54611647565b6040516124b094939291906133fa565b60405180910390a350505050565b600080826000015114156124d55760009050612507565b60008083602001519050805160001a915060c060ff168260ff16101561250057600092505050612507565b6001925050505b919050565b600080826000015114156125235760009050612595565b600080612533846020015161259a565b846020015161254291906135a1565b905060008460000151856020015161255a91906135a1565b90505b8082101561258e5761256e82612659565b8261257991906135a1565b9150828061258690613754565b93505061255d565b8293505050505b919050565b600080825160001a9050608060ff168110156125ba576000915050612654565b60b860ff168110806125df575060c060ff1681101580156125de575060f860ff1681105b5b156125ee576001915050612654565b60c060ff168110156126295760018060b8612609919061362b565b60ff168261261791906135f7565b61262191906135a1565b915050612654565b60018060f8612638919061362b565b60ff168261264691906135f7565b61265091906135a1565b9150505b919050565b6000806000835160001a9050608060ff1681101561267a576001915061272b565b60b860ff168110156126a9576001608060ff168261269891906135f7565b6126a291906135a1565b915061272a565b60c060ff168110156126d95760b78103600185019450806020036101000a85510460018201810193505050612729565b60f860ff1681101561270857600160c060ff16826126f791906135f7565b61270191906135a1565b9150612728565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b6000806000612747846020015161259a565b9050600081856020015161275b91906135a1565b9050600082866000015161276f91906135f7565b9050818194509450505050915091565b804710156127c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b99061333f565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff16826040516127e89061308b565b60006040518083038185875af1925050503d8060008114612825576040519150601f19603f3d011682016040523d82523d6000602084013e61282a565b606091505b505090508061286e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128659061325f565b60405180910390fd5b505050565b82805461287f906136f1565b90600052602060002090601f0160209004810192826128a157600085556128e8565b82601f106128ba57805160ff19168380011785556128e8565b828001600101855582156128e8579182015b828111156128e75782518255916020019190600101906128cc565b5b5090506128f59190612913565b5090565b604051806040016040528060008152602001600081525090565b5b8082111561292c576000816000905550600101612914565b5090565b600061294361293e846134c4565b61349f565b90508281526020810184848401111561295b57600080fd5b6129668482856136e2565b509392505050565b60008135905061297d81613b1a565b92915050565b60008151905061299281613b1a565b92915050565b60008083601f8401126129aa57600080fd5b8235905067ffffffffffffffff8111156129c357600080fd5b6020830191508360208202830111156129db57600080fd5b9250929050565b6000815190506129f181613b31565b92915050565b60008083601f840112612a0957600080fd5b8235905067ffffffffffffffff811115612a2257600080fd5b602083019150836001820283011115612a3a57600080fd5b9250929050565b600081359050612a5081613b48565b92915050565b600081359050612a6581613b5f565b92915050565b600081519050612a7a81613b76565b92915050565b600082601f830112612a9157600080fd5b8135612aa1848260208601612930565b91505092915050565b600060608284031215612abc57600080fd5b612ac6606061349f565b90506000612ad684828501612983565b6000830152506020612aea84828501612a6b565b6020830152506040612afe84828501612b1f565b60408301525092915050565b600081359050612b1981613b86565b92915050565b600081519050612b2e81613b86565b92915050565b600060208284031215612b4657600080fd5b6000612b548482850161296e565b91505092915050565b60008060408385031215612b7057600080fd5b6000612b7e8582860161296e565b9250506020612b8f85828601612b0a565b9150509250929050565b600060208284031215612bab57600080fd5b6000612bb9848285016129e2565b91505092915050565b60008060008060408587031215612bd857600080fd5b600085013567ffffffffffffffff811115612bf257600080fd5b612bfe878288016129f7565b9450945050602085013567ffffffffffffffff811115612c1d57600080fd5b612c2987828801612998565b925092505092959194509250565b600080600060608486031215612c4c57600080fd5b600084013567ffffffffffffffff811115612c6657600080fd5b612c7286828701612a80565b9350506020612c8386828701612a41565b9250506040612c9486828701612a56565b9150509250925092565b60008060808385031215612cb157600080fd5b6000612cbf85828601612aaa565b9250506060612cd0858286016129e2565b9150509250929050565b6000612ce7848484612daa565b90509392505050565b612cf98161365f565b82525050565b6000612d0b838561350c565b935083602084028501612d1d846134f5565b8060005b87811015612d63578484038952612d38828461354a565b612d43868284612cda565b9550612d4e846134ff565b935060208b019a505050600181019050612d21565b50829750879450505050509392505050565b612d7e81613671565b82525050565b612d8d8161367d565b82525050565b612da4612d9f8261367d565b61379d565b82525050565b6000612db6838561351d565b9350612dc38385846136e2565b612dcc83613846565b840190509392505050565b6000612de3838561352e565b9350612df08385846136e2565b82840190509392505050565b6000612e09600d83613539565b9150612e1482613864565b602082019050919050565b6000612e2c602683613539565b9150612e378261388d565b604082019050919050565b6000612e4f601683613539565b9150612e5a826138dc565b602082019050919050565b6000612e72600f83613539565b9150612e7d82613905565b602082019050919050565b6000612e95601483613539565b9150612ea08261392e565b602082019050919050565b6000612eb8601083613539565b9150612ec382613957565b602082019050919050565b6000612edb600f83613539565b9150612ee682613980565b602082019050919050565b6000612efe602e83613539565b9150612f09826139a9565b604082019050919050565b6000612f21601083613539565b9150612f2c826139f8565b602082019050919050565b6000612f44602083613539565b9150612f4f82613a21565b602082019050919050565b6000612f67601883613539565b9150612f7282613a4a565b602082019050919050565b6000612f8a600f83613539565b9150612f9582613a73565b602082019050919050565b6000612fad60008361352e565b9150612fb882613a9c565b600082019050919050565b6000612fd0601483613539565b9150612fdb82613a9f565b602082019050919050565b6000612ff3601f83613539565b9150612ffe82613ac8565b602082019050919050565b6000613016600f83613539565b915061302182613af1565b602082019050919050565b613035816136cb565b82525050565b613044816136d5565b82525050565b61305b613056826136d5565b6137a7565b82525050565b600061306e828587612dd7565b915061307a8284612d93565b602082019150819050949350505050565b600061309682612fa0565b9150819050919050565b60006130ac828461304a565b60018201915081905092915050565b60006020820190506130d06000830184612cf0565b92915050565b60006060820190506130eb6000830186612cf0565b6130f86020830185612cf0565b613105604083018461302c565b949350505050565b60006040820190506131226000830185612cf0565b61312f602083018461302c565b9392505050565b600060208201905061314b6000830184612d75565b92915050565b60006020820190506131666000830184612d84565b92915050565b600060a0820190506131816000830188612d84565b61318e6020830187612d84565b61319b6040830186612d84565b6131a8606083018561302c565b6131b56080830184612cf0565b9695505050505050565b60006060820190506131d46000830187612d84565b6131e1602083018661302c565b81810360408301526131f4818486612cff565b905095945050505050565b6000602082019050818103600083015261321881612dfc565b9050919050565b6000602082019050818103600083015261323881612e1f565b9050919050565b6000602082019050818103600083015261325881612e42565b9050919050565b6000602082019050818103600083015261327881612e65565b9050919050565b6000602082019050818103600083015261329881612e88565b9050919050565b600060208201905081810360008301526132b881612eab565b9050919050565b600060208201905081810360008301526132d881612ece565b9050919050565b600060208201905081810360008301526132f881612ef1565b9050919050565b6000602082019050818103600083015261331881612f14565b9050919050565b6000602082019050818103600083015261333881612f37565b9050919050565b6000602082019050818103600083015261335881612f5a565b9050919050565b6000602082019050818103600083015261337881612f7d565b9050919050565b6000602082019050818103600083015261339881612fc3565b9050919050565b600060208201905081810360008301526133b881612fe6565b9050919050565b600060208201905081810360008301526133d881613009565b9050919050565b60006020820190506133f4600083018461302c565b92915050565b600060808201905061340f600083018761302c565b61341c6020830186612d84565b613429604083018561302c565b6134366060830184612d84565b95945050505050565b6000608082019050613454600083018761302c565b613461602083018661302c565b61346e604083018561302c565b61347b6060830184612d84565b95945050505050565b6000602082019050613499600083018461303b565b92915050565b60006134a96134ba565b90506134b58282613723565b919050565b6000604051905090565b600067ffffffffffffffff8211156134df576134de613817565b5b6134e882613846565b9050602081019050919050565b6000819050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000808335600160200384360303811261356357600080fd5b83810192508235915060208301925067ffffffffffffffff82111561358757600080fd5b60018202360384131561359957600080fd5b509250929050565b60006135ac826136cb565b91506135b7836136cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156135ec576135eb6137b9565b5b828201905092915050565b6000613602826136cb565b915061360d836136cb565b9250828210156136205761361f6137b9565b5b828203905092915050565b6000613636826136d5565b9150613641836136d5565b925082821015613654576136536137b9565b5b828203905092915050565b600061366a826136ab565b9050919050565b60008115159050919050565b6000819050919050565b60006136928261365f565b9050919050565b60006136a48261365f565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b82818337600083830152505050565b6000600282049050600182168061370957607f821691505b6020821081141561371d5761371c6137e8565b5b50919050565b61372c82613846565b810181811067ffffffffffffffff8211171561374b5761374a613817565b5b80604052505050565b600061375f826136cb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613792576137916137b9565b5b600182019050919050565b6000819050919050565b60006137b282613857565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b60008160f81b9050919050565b7f42523a204e4f545f4f4e57455200000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f42523a20494e56414c49445f5349474e41545552455300000000000000000000600082015250565b7f42523a2053454e445f5245564552540000000000000000000000000000000000600082015250565b7f42523a20544f4b454e5f4e4f545f4c4953544544000000000000000000000000600082015250565b7f5061757361626c653a2070617573656400000000000000000000000000000000600082015250565b7f42523a2057524f4e475f434841494e0000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f42523a205a45524f5f4144445245535300000000000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f42523a20494e53554646494349454e545f42414c414e43450000000000000000600082015250565b7f42523a205a45524f5f414d4f554e540000000000000000000000000000000000600082015250565b50565b7f42523a20434f4d4d49544d454e545f4b4e4f574e000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f42523a20494e56414c49445f4556540000000000000000000000000000000000600082015250565b613b238161365f565b8114613b2e57600080fd5b50565b613b3a81613671565b8114613b4557600080fd5b50565b613b5181613687565b8114613b5c57600080fd5b50565b613b6881613699565b8114613b7357600080fd5b50565b60028110613b8357600080fd5b50565b613b8f816136cb565b8114613b9a57600080fd5b5056fea2646970667358221220aa01c16bd038db74b148fe3766945de4fadd18da265b4ad05492a2a8df61bc8764736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cosignerManagerAddress()": {
        "returns": {
          "_0": "The address of cosigner manager contract"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCosignerManager(address)": {
        "details": "This should be the contract responsible for sign by behalf of the payloads",
        "params": {
          "newCosignerManager": "address of cosigner manager contract"
        }
      },
      "setTokenManager(address)": {
        "details": "This should be the contract responsible for checking and add tokens to crosschain mapping",
        "params": {
          "newTokenManager": "address of token manager contract"
        }
      },
      "tokenManagerAddress()": {
        "returns": {
          "_0": "The address of token manager contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cosignerManagerAddress()": {
        "notice": "Get the address of contract set as cosigner manager"
      },
      "setCosignerManager(address)": {
        "notice": "Set the cosigner manager, callable only by cosigners"
      },
      "setTokenManager(address)": {
        "notice": "Set the token manager, callable only by cosigners"
      },
      "tokenManagerAddress()": {
        "notice": "Get the address of contract set as token manager"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 538,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 541,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 792,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 418,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 531,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 705,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 748,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 599,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 690,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1469,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_nonces",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1473,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_commitments",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 1482,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_cosignerManager",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IBridgeCosignerManager)2282"
      },
      {
        "astId": 1485,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_tokenManager",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IBridgeTokenManager)2387"
      },
      {
        "astId": 1487,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_name",
        "offset": 0,
        "slot": "205",
        "type": "t_string_storage"
      },
      {
        "astId": 1489,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_chainId",
        "offset": 0,
        "slot": "206",
        "type": "t_uint256"
      },
      {
        "astId": 1491,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "DOMAIN_SEPARATOR",
        "offset": 0,
        "slot": "207",
        "type": "t_bytes32"
      },
      {
        "astId": 1500,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "208",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridgeCosignerManager)2282": {
        "encoding": "inplace",
        "label": "contract IBridgeCosignerManager",
        "numberOfBytes": "20"
      },
      "t_contract(IBridgeTokenManager)2387": {
        "encoding": "inplace",
        "label": "contract IBridgeTokenManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}