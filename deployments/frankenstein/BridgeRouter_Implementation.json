{
  "address": "0x37CD2897fbF47fb368B98F96eF9FDC46a97E0277",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exitor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "nonce",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "localChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        }
      ],
      "name": "Enter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exitor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "localChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "extChainId",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cosignerManager",
      "outputs": [
        {
          "internalType": "contract IBridgeCosignerManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        }
      ],
      "name": "enter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "targetChainId",
          "type": "uint256"
        }
      ],
      "name": "enterETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "bytes[]",
          "name": "signatures",
          "type": "bytes[]"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBridgeCosignerManager",
          "name": "cosignerManager_",
          "type": "address"
        },
        {
          "internalType": "contract IBridgeTokenManager",
          "name": "tokenManager_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newCosignerManager",
          "type": "address"
        }
      ],
      "name": "setCosignerManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newTokenManager",
          "type": "address"
        }
      ],
      "name": "setTokenManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenManager",
      "outputs": [
        {
          "internalType": "contract IBridgeTokenManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x98e039b8972a830545c1fb37934bf25fd0c07da1244c60ee3406c01dbe1e0f02",
  "receipt": {
    "to": null,
    "from": "0xff189ee42C5D33837a58d0B7F16cE095E5C1Caab",
    "contractAddress": "0x37CD2897fbF47fb368B98F96eF9FDC46a97E0277",
    "transactionIndex": 0,
    "gasUsed": "1499049",
    "logsBloom": "0x
    "blockHash": "0x9cd932d6f81d110aa1d2befee7bebdcf5cacb2adf1b394fd5c641d5e6084f32f",
    "transactionHash": "0x98e039b8972a830545c1fb37934bf25fd0c07da1244c60ee3406c01dbe1e0f02",
    "logs": [],
    "blockNumber": 58511,
    "cumulativeGasUsed": "1499049",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1e7ca58c0221a7a337ae088eb3c7b104",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exitor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exitor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"localChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"extChainId\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cosignerManager\",\"outputs\":[{\"internalType\":\"contract IBridgeCosignerManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"targetChainId\",\"type\":\"uint256\"}],\"name\":\"enterETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes[]\",\"name\":\"signatures\",\"type\":\"bytes[]\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBridgeCosignerManager\",\"name\":\"cosignerManager_\",\"type\":\"address\"},{\"internalType\":\"contract IBridgeTokenManager\",\"name\":\"tokenManager_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newCosignerManager\",\"type\":\"address\"}],\"name\":\"setCosignerManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTokenManager\",\"type\":\"address\"}],\"name\":\"setTokenManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenManager\",\"outputs\":[{\"internalType\":\"contract IBridgeTokenManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCosignerManager(address)\":{\"details\":\"This should be the contract responsible for sign by behalf of the payloads\",\"params\":{\"newCosignerManager\":\"address of cosigner manager contract\"}},\"setTokenManager(address)\":{\"details\":\"This should be the contract responsible for checking and add tokens to crosschain mapping\",\"params\":{\"newTokenManager\":\"address of token manager contract\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setCosignerManager(address)\":{\"notice\":\"Set the cosigner manager, callable only by cosigners\"},\"setTokenManager(address)\":{\"notice\":\"Set the token manager, callable only by cosigners\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeRouter.sol\":\"BridgeRouter\"},\"evmVersion\":\"berlin\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/BridgeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./library/RLPReader.sol\\\";\\nimport \\\"./library/RToken.sol\\\";\\nimport \\\"./versions/Version0.sol\\\";\\nimport \\\"./interfaces/IBridgeCosignerManager.sol\\\";\\nimport \\\"./interfaces/IBridgeToken.sol\\\";\\nimport \\\"./interfaces/IBridgeTokenManager.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./interfaces/IOwnable.sol\\\";\\n\\ncontract BridgeRouter is\\n    Version0,\\n    OwnableUpgradeable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable\\n{\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n    using SafeERC20 for IERC20;\\n    using RToken for RToken.Token;\\n\\n    mapping(address => uint256) internal _nonces;\\n    mapping(bytes32 => bool) internal _commitments;\\n\\n    // ===== initialize override =====\\n    IBridgeCosignerManager public cosignerManager;\\n    IBridgeTokenManager public tokenManager;\\n    uint256 internal _chainId;\\n\\n    // ===== signing =====\\n    bytes32 internal constant ENTER_EVENT_SIG =\\n        keccak256(\\n            \\\"Enter(address token,address exitor,uint256 amount,uint256 nonce,uint256 localChainId,uint256 targetChainId)\\\"\\n        );\\n\\n    // ===== proxy =====\\n\\n    uint256[49] private __gap;\\n\\n    // ===== events =====\\n\\n    event Enter(\\n        address indexed token,\\n        address indexed exitor,\\n        uint256 amount,\\n        uint256 nonce,\\n        uint256 localChainId,\\n        uint256 targetChainId\\n    );\\n\\n    event Exit(\\n        address indexed token,\\n        address indexed exitor,\\n        uint256 amount,\\n        bytes32 commitment,\\n        uint256 localChainId,\\n        uint256 extChainId\\n    );\\n\\n    function emitEnter(\\n        address token,\\n        address from,\\n        uint256 amount,\\n        uint256 targetChainId\\n    ) internal {\\n        emit Enter(token, from, amount, _nonces[from], _chainId, targetChainId);\\n        _nonces[from]++;\\n    }\\n\\n    function emitExit(\\n        address token,\\n        address to,\\n        bytes32 commitment,\\n        uint256 amount,\\n        uint256 extChainId\\n    ) internal {\\n        emit Exit(token, to, amount, commitment, _chainId, extChainId);\\n    }\\n\\n    // ===== functionality to update =====\\n\\n    /**\\n     * @notice Set the token manager, callable only by cosigners\\n     * @dev This should be the contract responsible for checking and add tokens to crosschain mapping\\n     * @param newTokenManager address of token manager contract\\n     */\\n    function setTokenManager(address newTokenManager) external onlyOwner {\\n        require(newTokenManager != address(0), \\\"BR: ZERO_ADDRESS\\\");\\n        tokenManager = IBridgeTokenManager(newTokenManager);\\n    }\\n\\n    /**\\n     * @notice Set the cosigner manager, callable only by cosigners\\n     * @dev This should be the contract responsible for sign by behalf of the payloads\\n     * @param newCosignerManager address of cosigner manager contract\\n     */\\n    function setCosignerManager(address newCosignerManager) external onlyOwner {\\n        require(newCosignerManager != address(0), \\\"BR: ZERO_ADDRESS\\\");\\n        cosignerManager = IBridgeCosignerManager(newCosignerManager);\\n    }\\n\\n    // Initialize function for proxy constructor. Must be used atomically\\n    function initialize(\\n        IBridgeCosignerManager cosignerManager_,\\n        IBridgeTokenManager tokenManager_\\n    ) public initializer {\\n        cosignerManager = cosignerManager_;\\n        tokenManager = tokenManager_;\\n        assembly {\\n            sstore(_chainId.slot, chainid())\\n        }\\n\\n        // proxy inits\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    // enter amount of tokens to protocol\\n    function enter(\\n        address token,\\n        uint256 amount,\\n        uint256 targetChainId\\n    ) external nonReentrant whenNotPaused {\\n        require(token != address(0), \\\"BR: ZERO_ADDRESS\\\");\\n        require(amount != 0, \\\"BR: ZERO_AMOUNT\\\");\\n\\n        RToken.Token memory localToken = tokenManager\\n            .getLocal(token, targetChainId)\\n            .enter(amount);\\n        emitEnter(localToken.addr, _msgSender(), amount, targetChainId);\\n    }\\n\\n    // enter amount of system currency to protocol\\n    function enterETH(uint256 targetChainId)\\n        external\\n        payable\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        require(msg.value != 0, \\\"BR: ZERO_AMOUNT\\\");\\n        require(tokenManager.isZero(targetChainId), \\\"BR: NOT_FOUND\\\");\\n\\n        emitEnter(address(0), _msgSender(), msg.value, targetChainId);\\n    }\\n\\n    // exit amount of tokens from protocol\\n    function exit(bytes calldata data, bytes[] calldata signatures)\\n        external\\n        nonReentrant\\n        whenNotPaused\\n    {\\n        RLPReader.RLPItem[] memory logRLPList = data.toRlpItem().toList();\\n        RLPReader.RLPItem[] memory logTopicRLPList = logRLPList[1].toList(); // topics\\n\\n        require(\\n            bytes32(logTopicRLPList[0].toUint()) == ENTER_EVENT_SIG, // topic0 is event sig\\n            \\\"BR: INVALID_EVT\\\"\\n        );\\n\\n        address extTokenAddr = logTopicRLPList[1].toAddress();\\n        address to = logTopicRLPList[2].toAddress();\\n        require(to == _msgSender(), \\\"BR: NOT_ONWER\\\");\\n\\n        uint256 amount = logRLPList[2].toUint();\\n        require(amount != 0, \\\"BR: ZERO_AMOUNT\\\");\\n\\n        uint256 extChainId = logRLPList[3].toUint();\\n        require(extChainId != _chainId, \\\"BR: WRONG_SOURCE_CHAIN\\\");\\n\\n        require(logRLPList[4].toUint() == _chainId, \\\"BR: WRONG_TARGET_CHAIN\\\");\\n\\n        // protected from replay on another network\\n        bytes32 commitment = keccak256(data);\\n\\n        require(!_commitments[commitment], \\\"BR: COMMITMENT_KNOWN\\\");\\n        require(\\n            cosignerManager.verify(commitment, extChainId, signatures),\\n            \\\"BR: INVALID_SIGNATURES\\\"\\n        );\\n\\n        _commitments[commitment] = true;\\n\\n        RToken.Token memory localToken = tokenManager\\n            .getLocal(extTokenAddr, _chainId)\\n            .exit(to, amount);\\n        emitExit(localToken.addr, to, commitment, amount, extChainId);\\n    }\\n}\\n\",\"keccak256\":\"0x296162804bfac0aaf009dceb5f1d2819be4fcc563b15b9676494dc3bb72a65b6\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeCosignerManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBridgeCosignerManager {\\n    event CosignerAdded(address indexed cosaddr, uint256 chainId);\\n    event CosignerRemoved(address indexed cosaddr, uint256 chainId);\\n    struct Cosigner {\\n        address addr;\\n        uint256 chainId;\\n        uint256 index;\\n        bool active;\\n    }\\n\\n    function addCosigner(address cosaddr, uint256 chainId) external;\\n\\n    function addCosignerBatch(address[] calldata cosaddrs, uint256 chainId)\\n        external;\\n\\n    function removeCosigner(address cosaddr) external;\\n\\n    function removeCosignerBatch(address[] calldata cosaddrs) external;\\n\\n    function getCosigners(uint256 chainId)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function getCosignCount(uint256 chainId) external view returns (uint8);\\n\\n    function verify(\\n        bytes32 commitment,\\n        uint256 chainId,\\n        bytes[] calldata signatures\\n    ) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfabdd8ef3a89d2a7a561c731347028ccdb596e05154054c61e51908f402b0dde\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBridgeToken {\\n    function burn(address from, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x5da30954f099315154d694061fef990ffd9e5df7c9b356765c2ce99b798b4783\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeTokenManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../library/RToken.sol\\\";\\n\\ninterface IBridgeTokenManager {\\n    event TokenAdded(address indexed addr, uint256 chainId);\\n    event TokenRemoved(address indexed addr, uint256 chainId);\\n\\n    function issue(\\n        address[] calldata tokens,\\n        RToken.IssueType[] calldata issueTypes,\\n        uint256 targetChainId\\n    ) external;\\n\\n    function revoke(address targetAddr) external;\\n\\n    function getLocal(address sourceAddr, uint256 targetChainId)\\n        external\\n        view\\n        returns (RToken.Token memory token);\\n\\n    function isZero(uint256 targetChainId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x36bfbca4f6ba1f8e8fc0f2effa6a1d43d22a83bda9c189d109ae72f67f9b4fd6\",\"license\":\"MIT\"},\"contracts/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IOwnable {\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0xd1f7e0d61a7a58ab4b8d5eb0116fab6ca88dddd497a8ba4f8576141ed90246cf\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x8f559d34b550babeca68580b00d0544481b9f0349326891af2d3db25af278b25\",\"license\":\"MIT\"},\"contracts/library/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item)\\n        internal\\n        pure\\n        returns (RLPItem memory)\\n    {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self)\\n        internal\\n        pure\\n        returns (Iterator memory)\\n    {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item)\\n        internal\\n        pure\\n        returns (uint256, uint256)\\n    {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item)\\n        internal\\n        pure\\n        returns (RLPItem[] memory)\\n    {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item)\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shfit to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) itemLen = 1;\\n        else if (byte0 < STRING_LONG_START)\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) return 0;\\n        else if (\\n            byte0 < STRING_LONG_START ||\\n            (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n        ) return 1;\\n        else if (byte0 < LIST_SHORT_START)\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        else return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(\\n        uint256 src,\\n        uint256 dest,\\n        uint256 len\\n    ) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x082636e1e83173379251205fb69fb87c9b74db93331fccb74d5b458cf285737d\",\"license\":\"MIT\"},\"contracts/library/RToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IBridgeToken.sol\\\";\\n\\nlibrary RToken {\\n    using SafeERC20 for IERC20;\\n\\n    enum IssueType {\\n        DEFAULT,\\n        MINTABLE\\n    }\\n\\n    struct Token {\\n        address addr;\\n        uint256 chainId;\\n        IssueType issueType;\\n        bool exist;\\n    }\\n\\n    function unsafeTransfer(address to, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"BR: INSUFFICIENT_BALANCE\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"BR: SEND_REVERT\\\");\\n    }\\n\\n    function enter(Token memory token, uint256 amount)\\n        public\\n        returns (Token memory)\\n    {\\n        require(token.exist, \\\"RToken: NOT_LISTED\\\");\\n        if (token.issueType == IssueType.MINTABLE) {\\n            IBridgeToken(token.addr).burn(msg.sender, amount);\\n        } else if (token.issueType == IssueType.DEFAULT) {\\n            IERC20(token.addr).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                amount\\n            );\\n        } else {\\n            assert(false);\\n        }\\n        return token;\\n    }\\n\\n    function exit(\\n        Token memory token,\\n        address to,\\n        uint256 amount\\n    ) public returns (Token memory) {\\n        require(token.exist, \\\"RToken: NOT_LISTED\\\");\\n        if (token.addr == address(0)) {\\n            unsafeTransfer(to, amount);\\n        } else if (token.issueType == IssueType.MINTABLE) {\\n            IBridgeToken(token.addr).mint(to, amount);\\n        } else if (token.issueType == IssueType.DEFAULT) {\\n            IERC20(token.addr).safeTransfer(to, amount);\\n        } else {\\n            assert(false);\\n        }\\n        return token;\\n    }\\n}\\n\",\"keccak256\":\"0x45c313ac2fd9f1066fb016c5707fe699154058729454ee73d5c2d21fc13c2cfd\",\"license\":\"MIT\"},\"contracts/versions/Version0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Version0\\n * @notice Version getter for contracts\\n **/\\ncontract Version0 {\\n    uint8 public constant VERSION = 0;\\n}\\n\",\"keccak256\":\"0x73ec3f2a0f75d0009238e599818fda21bbc06516085c3d3679c8789c25977bda\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611a28806100206000396000f3fe6080604052600436106100c25760003560e01c8063ac7cffa61161007f578063ce18acd411610059578063ce18acd4146101fc578063d5804bd41461020f578063f2fde38b1461022f578063ffa1ad741461024f57600080fd5b8063ac7cffa61461019c578063ae8f4f3a146101bc578063b0c8bd04146101dc57600080fd5b80632a709b14146100c7578063485cc955146101045780635c975abb14610126578063715018a6146101495780637cb2b79c1461015e5780638da5cb5b1461017e575b600080fd5b3480156100d357600080fd5b5060cc546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011057600080fd5b5061012461011f3660046115d9565b610276565b005b34801561013257600080fd5b5060975460ff1660405190151581526020016100fb565b34801561015557600080fd5b50610124610341565b34801561016a57600080fd5b506101246101793660046114b3565b610377565b34801561018a57600080fd5b506033546001600160a01b03166100e7565b3480156101a857600080fd5b5060cb546100e7906001600160a01b031681565b3480156101c857600080fd5b506101246101d736600461151d565b6103e9565b3480156101e857600080fd5b506101246101f73660046114b3565b6109a0565b61012461020a366004611699565b610a12565b34801561021b57600080fd5b5061012461022a3660046114cf565b610b47565b34801561023b57600080fd5b5061012461024a3660046114b3565b610cfe565b34801561025b57600080fd5b50610264600081565b60405160ff90911681526020016100fb565b600054610100900460ff168061028f575060005460ff16155b6102b45760405162461bcd60e51b81526004016102ab9061180a565b60405180910390fd5b600054610100900460ff161580156102d6576000805461ffff19166101011790555b60cb80546001600160a01b038086166001600160a01b03199283161790925560cc8054928516929091169190911790554660cd55610312610d99565b61031a610e04565b610322610e64565b61032a610ed9565b801561033c576000805461ff00191690555b505050565b6033546001600160a01b0316331461036b5760405162461bcd60e51b81526004016102ab90611882565b6103756000610f49565b565b6033546001600160a01b031633146103a15760405162461bcd60e51b81526004016102ab90611882565b6001600160a01b0381166103c75760405162461bcd60e51b81526004016102ab90611858565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6002606554141561040c5760405162461bcd60e51b81526004016102ab906118e0565b600260655560975460ff16156104345760405162461bcd60e51b81526004016102ab906117e0565b600061047d61047886868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f9b92505050565b610fc8565b905060006104b2826001815181106104a557634e487b7160e01b600052603260045260246000fd5b6020026020010151610fc8565b90507f7830e52c0466b25b194d23dc2e07cd1d08f1177aa6afac5b6475fe22327c72ae610506826000815181106104f957634e487b7160e01b600052603260045260246000fd5b60200260200101516110fa565b146105455760405162461bcd60e51b815260206004820152600f60248201526e10948e881253959053125117d15595608a1b60448201526064016102ab565b60006105788260018151811061056b57634e487b7160e01b600052603260045260246000fd5b6020026020010151611148565b905060006105a08360028151811061056b57634e487b7160e01b600052603260045260246000fd5b90506001600160a01b03811633146105ea5760405162461bcd60e51b815260206004820152600d60248201526c21291d102727aa2fa7a72ba2a960991b60448201526064016102ab565b6000610610856002815181106104f957634e487b7160e01b600052603260045260246000fd5b90508061062f5760405162461bcd60e51b81526004016102ab906118b7565b6000610655866003815181106104f957634e487b7160e01b600052603260045260246000fd5b905060cd548114156106a25760405162461bcd60e51b815260206004820152601660248201527521291d102ba927a723afa9a7aaa921a2afa1a420a4a760511b60448201526064016102ab565b60cd546106c9876004815181106104f957634e487b7160e01b600052603260045260246000fd5b1461070f5760405162461bcd60e51b815260206004820152601660248201527521291d102ba927a723afaa20a923a2aa2fa1a420a4a760511b60448201526064016102ab565b60008a8a604051610721929190611726565b6040805191829003909120600081815260ca602052919091205490915060ff16156107855760405162461bcd60e51b815260206004820152601460248201527321291d1021a7a6a6a4aa26a2a72a2fa5a727aba760611b60448201526064016102ab565b60cb546040516307cdd1ed60e31b81526001600160a01b0390911690633e6e8f68906107bb90849086908e908e90600401611736565b60206040518083038186803b1580156107d357600080fd5b505afa1580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b9190611503565b6108505760405162461bcd60e51b815260206004820152601660248201527542523a20494e56414c49445f5349474e41545552455360501b60448201526064016102ab565b600081815260ca6020526040808220805460ff1916600117905560cc5460cd54915163707af71960e11b81526001600160a01b038981166004830152602482019390935291169063e0f5ee329060440160806040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190611611565b604051631a6c458d60e01b8152738DfecB75FbAEDFA2b8E9b8092c9a601F90A462C991631a6c458d9161092a919089908990600401611917565b60806040518083038186803b15801561094257600080fd5b505af4158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190611611565b905061098d816000015186848787611168565b5050600160655550505050505050505050565b6033546001600160a01b031633146109ca5760405162461bcd60e51b81526004016102ab90611882565b6001600160a01b0381166109f05760405162461bcd60e51b81526004016102ab90611858565b60cb80546001600160a01b0319166001600160a01b0392909216919091179055565b60026065541415610a355760405162461bcd60e51b81526004016102ab906118e0565b600260655560975460ff1615610a5d5760405162461bcd60e51b81526004016102ab906117e0565b34610a7a5760405162461bcd60e51b81526004016102ab906118b7565b60cc54604051637a38f9eb60e01b8152600481018390526001600160a01b0390911690637a38f9eb9060240160206040518083038186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190611503565b610b325760405162461bcd60e51b815260206004820152600d60248201526c10948e881393d517d193d55391609a1b60448201526064016102ab565b610b3f60003334846111d8565b506001606555565b60026065541415610b6a5760405162461bcd60e51b81526004016102ab906118e0565b600260655560975460ff1615610b925760405162461bcd60e51b81526004016102ab906117e0565b6001600160a01b038316610bb85760405162461bcd60e51b81526004016102ab90611858565b81610bd55760405162461bcd60e51b81526004016102ab906118b7565b60cc5460405163707af71960e11b81526001600160a01b03858116600483015260248201849052600092169063e0f5ee329060440160806040518083038186803b158015610c2257600080fd5b505afa158015610c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5a9190611611565b60405163eb7f02d960e01b8152738DfecB75FbAEDFA2b8E9b8092c9a601F90A462C99163eb7f02d991610c929190879060040161193f565b60806040518083038186803b158015610caa57600080fd5b505af4158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce29190611611565b8051909150610cf3903385856111d8565b505060016065555050565b6033546001600160a01b03163314610d285760405162461bcd60e51b81526004016102ab90611882565b6001600160a01b038116610d8d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ab565b610d9681610f49565b50565b600054610100900460ff1680610db2575060005460ff16155b610dce5760405162461bcd60e51b81526004016102ab9061180a565b600054610100900460ff16158015610df0576000805461ffff19166101011790555b8015610d96576000805461ff001916905550565b600054610100900460ff1680610e1d575060005460ff16155b610e395760405162461bcd60e51b81526004016102ab9061180a565b600054610100900460ff16158015610e5b576000805461ffff19166101011790555b610df033610f49565b600054610100900460ff1680610e7d575060005460ff16155b610e995760405162461bcd60e51b81526004016102ab9061180a565b600054610100900460ff16158015610ebb576000805461ffff19166101011790555b6097805460ff191690558015610d96576000805461ff001916905550565b600054610100900460ff1680610ef2575060005460ff16155b610f0e5760405162461bcd60e51b81526004016102ab9061180a565b600054610100900460ff16158015610f30576000805461ffff19166101011790555b60016065558015610d96576000805461ff001916905550565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6060610fd382611270565b610fdc57600080fd5b6000610fe7836112a9565b905060008167ffffffffffffffff81111561101257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561105757816020015b60408051808201909152600080825260208201528152602001906001900390816110305790505b5090506000611069856020015161132c565b8560200151611078919061195a565b90506000805b848110156110ef5761108f836113ae565b91506040518060400160405280838152602001848152508482815181106110c657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526110db828461195a565b9250806110e7816119ac565b91505061107e565b509195945050505050565b80516000901580159061110f57508151602110155b61111857600080fd5b60008061112484611457565b8151919350915060208210156111405760208290036101000a90045b949350505050565b805160009060151461115957600080fd5b611162826110fa565b92915050565b836001600160a01b0316856001600160a01b03167f812815d6ddc266545cbe93cd74cdaec6517a81842a230a1773c976e78389ad2e848660cd54866040516111c9949392919093845260208401929092526040830152606082015260800190565b60405180910390a35050505050565b6001600160a01b03838116600081815260c960209081526040918290205460cd548351888152928301919091528183015260608101859052905191928716917f553685c68db2f1e0adf08d56c06ec87ff411232298a59276dbdb1b032c38151e9181900360800190a36001600160a01b038316600090815260c960205260408120805491611265836119ac565b919050555050505050565b805160009061128157506000919050565b6020820151805160001a9060c082101561129f575060009392505050565b5060019392505050565b80516000906112ba57506000919050565b6000806112ca846020015161132c565b84602001516112d9919061195a565b90506000846000015185602001516112f1919061195a565b90505b8082101561132357611305826113ae565b61130f908361195a565b91508261131b816119ac565b9350506112f4565b50909392505050565b8051600090811a60808110156113455750600092915050565b60b8811080611360575060c08110801590611360575060f881105b1561136e5750600192915050565b60c08110156113a257611383600160b8611989565b6113909060ff1682611972565b61139b90600161195a565b9392505050565b611383600160f8611989565b80516000908190811a60808110156113c95760019150611450565b60b88110156113ef576113dd608082611972565b6113e890600161195a565b9150611450565b60c081101561141c5760b78103600185019450806020036101000a85510460018201810193505050611450565b60f8811015611430576113dd60c082611972565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b6000806000611469846020015161132c565b9050600081856020015161147d919061195a565b905060008286600001516114919190611972565b9196919550909350505050565b805180151581146114ae57600080fd5b919050565b6000602082840312156114c4578081fd5b813561139b816119dd565b6000806000606084860312156114e3578182fd5b83356114ee816119dd565b95602085013595506040909401359392505050565b600060208284031215611514578081fd5b61139b8261149e565b60008060008060408587031215611532578081fd5b843567ffffffffffffffff80821115611549578283fd5b818701915087601f83011261155c578283fd5b81358181111561156a578384fd5b88602082850101111561157b578384fd5b602092830196509450908601359080821115611595578283fd5b818701915087601f8301126115a8578283fd5b8135818111156115b6578384fd5b8860208260051b85010111156115ca578384fd5b95989497505060200194505050565b600080604083850312156115eb578182fd5b82356115f6816119dd565b91506020830135611606816119dd565b809150509250929050565b600060808284031215611622578081fd5b6040516080810181811067ffffffffffffffff8211171561165157634e487b7160e01b83526041600452602483fd5b604052825161165f816119dd565b81526020838101519082015260408301516002811061167c578283fd5b604082015261168d6060840161149e565b60608201529392505050565b6000602082840312156116aa578081fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b80516001600160a01b031682526020808201519083015260408101516002811061171457634e487b7160e01b600052602160045260246000fd5b60408301526060908101511515910152565b8183823760009101908152919050565b60006060820186835260208681850152606060408501528185835260808501905060808660051b860101925086845b878110156117d157868503607f190183528135368a9003601e1901811261178a578687fd5b8901803567ffffffffffffffff8111156117a2578788fd5b8036038b13156117b0578788fd5b6117bd87828885016116b1565b965050509183019190830190600101611765565b50929998505050505050505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526010908201526f42523a205a45524f5f4144445245535360801b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600f908201526e10948e8816915493d7d05353d55395608a1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60c0810161192582866116da565b6001600160a01b0393909316608082015260a00152919050565b60a0810161194d82856116da565b8260808301529392505050565b6000821982111561196d5761196d6119c7565b500190565b600082821015611984576119846119c7565b500390565b600060ff821660ff8416808210156119a3576119a36119c7565b90039392505050565b60006000198214156119c0576119c06119c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d9657600080fdfea264697066735822122005b5a4e3b4cebf1ae9def02c3ca668c11366ee5ce82a96dfa1c4b7c3449057d864736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c8063ac7cffa61161007f578063ce18acd411610059578063ce18acd4146101fc578063d5804bd41461020f578063f2fde38b1461022f578063ffa1ad741461024f57600080fd5b8063ac7cffa61461019c578063ae8f4f3a146101bc578063b0c8bd04146101dc57600080fd5b80632a709b14146100c7578063485cc955146101045780635c975abb14610126578063715018a6146101495780637cb2b79c1461015e5780638da5cb5b1461017e575b600080fd5b3480156100d357600080fd5b5060cc546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561011057600080fd5b5061012461011f3660046115d9565b610276565b005b34801561013257600080fd5b5060975460ff1660405190151581526020016100fb565b34801561015557600080fd5b50610124610341565b34801561016a57600080fd5b506101246101793660046114b3565b610377565b34801561018a57600080fd5b506033546001600160a01b03166100e7565b3480156101a857600080fd5b5060cb546100e7906001600160a01b031681565b3480156101c857600080fd5b506101246101d736600461151d565b6103e9565b3480156101e857600080fd5b506101246101f73660046114b3565b6109a0565b61012461020a366004611699565b610a12565b34801561021b57600080fd5b5061012461022a3660046114cf565b610b47565b34801561023b57600080fd5b5061012461024a3660046114b3565b610cfe565b34801561025b57600080fd5b50610264600081565b60405160ff90911681526020016100fb565b600054610100900460ff168061028f575060005460ff16155b6102b45760405162461bcd60e51b81526004016102ab9061180a565b60405180910390fd5b600054610100900460ff161580156102d6576000805461ffff19166101011790555b60cb80546001600160a01b038086166001600160a01b03199283161790925560cc8054928516929091169190911790554660cd55610312610d99565b61031a610e04565b610322610e64565b61032a610ed9565b801561033c576000805461ff00191690555b505050565b6033546001600160a01b0316331461036b5760405162461bcd60e51b81526004016102ab90611882565b6103756000610f49565b565b6033546001600160a01b031633146103a15760405162461bcd60e51b81526004016102ab90611882565b6001600160a01b0381166103c75760405162461bcd60e51b81526004016102ab90611858565b60cc80546001600160a01b0319166001600160a01b0392909216919091179055565b6002606554141561040c5760405162461bcd60e51b81526004016102ab906118e0565b600260655560975460ff16156104345760405162461bcd60e51b81526004016102ab906117e0565b600061047d61047886868080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610f9b92505050565b610fc8565b905060006104b2826001815181106104a557634e487b7160e01b600052603260045260246000fd5b6020026020010151610fc8565b90507f7830e52c0466b25b194d23dc2e07cd1d08f1177aa6afac5b6475fe22327c72ae610506826000815181106104f957634e487b7160e01b600052603260045260246000fd5b60200260200101516110fa565b146105455760405162461bcd60e51b815260206004820152600f60248201526e10948e881253959053125117d15595608a1b60448201526064016102ab565b60006105788260018151811061056b57634e487b7160e01b600052603260045260246000fd5b6020026020010151611148565b905060006105a08360028151811061056b57634e487b7160e01b600052603260045260246000fd5b90506001600160a01b03811633146105ea5760405162461bcd60e51b815260206004820152600d60248201526c21291d102727aa2fa7a72ba2a960991b60448201526064016102ab565b6000610610856002815181106104f957634e487b7160e01b600052603260045260246000fd5b90508061062f5760405162461bcd60e51b81526004016102ab906118b7565b6000610655866003815181106104f957634e487b7160e01b600052603260045260246000fd5b905060cd548114156106a25760405162461bcd60e51b815260206004820152601660248201527521291d102ba927a723afa9a7aaa921a2afa1a420a4a760511b60448201526064016102ab565b60cd546106c9876004815181106104f957634e487b7160e01b600052603260045260246000fd5b1461070f5760405162461bcd60e51b815260206004820152601660248201527521291d102ba927a723afaa20a923a2aa2fa1a420a4a760511b60448201526064016102ab565b60008a8a604051610721929190611726565b6040805191829003909120600081815260ca602052919091205490915060ff16156107855760405162461bcd60e51b815260206004820152601460248201527321291d1021a7a6a6a4aa26a2a72a2fa5a727aba760611b60448201526064016102ab565b60cb546040516307cdd1ed60e31b81526001600160a01b0390911690633e6e8f68906107bb90849086908e908e90600401611736565b60206040518083038186803b1580156107d357600080fd5b505afa1580156107e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080b9190611503565b6108505760405162461bcd60e51b815260206004820152601660248201527542523a20494e56414c49445f5349474e41545552455360501b60448201526064016102ab565b600081815260ca6020526040808220805460ff1916600117905560cc5460cd54915163707af71960e11b81526001600160a01b038981166004830152602482019390935291169063e0f5ee329060440160806040518083038186803b1580156108b857600080fd5b505afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f09190611611565b604051631a6c458d60e01b815273__$0f7a70bf1eceec6d63f461556e97c9344e$__91631a6c458d9161092a919089908990600401611917565b60806040518083038186803b15801561094257600080fd5b505af4158015610956573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097a9190611611565b905061098d816000015186848787611168565b5050600160655550505050505050505050565b6033546001600160a01b031633146109ca5760405162461bcd60e51b81526004016102ab90611882565b6001600160a01b0381166109f05760405162461bcd60e51b81526004016102ab90611858565b60cb80546001600160a01b0319166001600160a01b0392909216919091179055565b60026065541415610a355760405162461bcd60e51b81526004016102ab906118e0565b600260655560975460ff1615610a5d5760405162461bcd60e51b81526004016102ab906117e0565b34610a7a5760405162461bcd60e51b81526004016102ab906118b7565b60cc54604051637a38f9eb60e01b8152600481018390526001600160a01b0390911690637a38f9eb9060240160206040518083038186803b158015610abe57600080fd5b505afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190611503565b610b325760405162461bcd60e51b815260206004820152600d60248201526c10948e881393d517d193d55391609a1b60448201526064016102ab565b610b3f60003334846111d8565b506001606555565b60026065541415610b6a5760405162461bcd60e51b81526004016102ab906118e0565b600260655560975460ff1615610b925760405162461bcd60e51b81526004016102ab906117e0565b6001600160a01b038316610bb85760405162461bcd60e51b81526004016102ab90611858565b81610bd55760405162461bcd60e51b81526004016102ab906118b7565b60cc5460405163707af71960e11b81526001600160a01b03858116600483015260248201849052600092169063e0f5ee329060440160806040518083038186803b158015610c2257600080fd5b505afa158015610c36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5a9190611611565b60405163eb7f02d960e01b815273__$0f7a70bf1eceec6d63f461556e97c9344e$__9163eb7f02d991610c929190879060040161193f565b60806040518083038186803b158015610caa57600080fd5b505af4158015610cbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce29190611611565b8051909150610cf3903385856111d8565b505060016065555050565b6033546001600160a01b03163314610d285760405162461bcd60e51b81526004016102ab90611882565b6001600160a01b038116610d8d5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102ab565b610d9681610f49565b50565b600054610100900460ff1680610db2575060005460ff16155b610dce5760405162461bcd60e51b81526004016102ab9061180a565b600054610100900460ff16158015610df0576000805461ffff19166101011790555b8015610d96576000805461ff001916905550565b600054610100900460ff1680610e1d575060005460ff16155b610e395760405162461bcd60e51b81526004016102ab9061180a565b600054610100900460ff16158015610e5b576000805461ffff19166101011790555b610df033610f49565b600054610100900460ff1680610e7d575060005460ff16155b610e995760405162461bcd60e51b81526004016102ab9061180a565b600054610100900460ff16158015610ebb576000805461ffff19166101011790555b6097805460ff191690558015610d96576000805461ff001916905550565b600054610100900460ff1680610ef2575060005460ff16155b610f0e5760405162461bcd60e51b81526004016102ab9061180a565b600054610100900460ff16158015610f30576000805461ffff19166101011790555b60016065558015610d96576000805461ff001916905550565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60408051808201825260008082526020918201528151808301909252825182529182019181019190915290565b6060610fd382611270565b610fdc57600080fd5b6000610fe7836112a9565b905060008167ffffffffffffffff81111561101257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561105757816020015b60408051808201909152600080825260208201528152602001906001900390816110305790505b5090506000611069856020015161132c565b8560200151611078919061195a565b90506000805b848110156110ef5761108f836113ae565b91506040518060400160405280838152602001848152508482815181106110c657634e487b7160e01b600052603260045260246000fd5b60209081029190910101526110db828461195a565b9250806110e7816119ac565b91505061107e565b509195945050505050565b80516000901580159061110f57508151602110155b61111857600080fd5b60008061112484611457565b8151919350915060208210156111405760208290036101000a90045b949350505050565b805160009060151461115957600080fd5b611162826110fa565b92915050565b836001600160a01b0316856001600160a01b03167f812815d6ddc266545cbe93cd74cdaec6517a81842a230a1773c976e78389ad2e848660cd54866040516111c9949392919093845260208401929092526040830152606082015260800190565b60405180910390a35050505050565b6001600160a01b03838116600081815260c960209081526040918290205460cd548351888152928301919091528183015260608101859052905191928716917f553685c68db2f1e0adf08d56c06ec87ff411232298a59276dbdb1b032c38151e9181900360800190a36001600160a01b038316600090815260c960205260408120805491611265836119ac565b919050555050505050565b805160009061128157506000919050565b6020820151805160001a9060c082101561129f575060009392505050565b5060019392505050565b80516000906112ba57506000919050565b6000806112ca846020015161132c565b84602001516112d9919061195a565b90506000846000015185602001516112f1919061195a565b90505b8082101561132357611305826113ae565b61130f908361195a565b91508261131b816119ac565b9350506112f4565b50909392505050565b8051600090811a60808110156113455750600092915050565b60b8811080611360575060c08110801590611360575060f881105b1561136e5750600192915050565b60c08110156113a257611383600160b8611989565b6113909060ff1682611972565b61139b90600161195a565b9392505050565b611383600160f8611989565b80516000908190811a60808110156113c95760019150611450565b60b88110156113ef576113dd608082611972565b6113e890600161195a565b9150611450565b60c081101561141c5760b78103600185019450806020036101000a85510460018201810193505050611450565b60f8811015611430576113dd60c082611972565b60f78103600185019450806020036101000a855104600182018101935050505b5092915050565b6000806000611469846020015161132c565b9050600081856020015161147d919061195a565b905060008286600001516114919190611972565b9196919550909350505050565b805180151581146114ae57600080fd5b919050565b6000602082840312156114c4578081fd5b813561139b816119dd565b6000806000606084860312156114e3578182fd5b83356114ee816119dd565b95602085013595506040909401359392505050565b600060208284031215611514578081fd5b61139b8261149e565b60008060008060408587031215611532578081fd5b843567ffffffffffffffff80821115611549578283fd5b818701915087601f83011261155c578283fd5b81358181111561156a578384fd5b88602082850101111561157b578384fd5b602092830196509450908601359080821115611595578283fd5b818701915087601f8301126115a8578283fd5b8135818111156115b6578384fd5b8860208260051b85010111156115ca578384fd5b95989497505060200194505050565b600080604083850312156115eb578182fd5b82356115f6816119dd565b91506020830135611606816119dd565b809150509250929050565b600060808284031215611622578081fd5b6040516080810181811067ffffffffffffffff8211171561165157634e487b7160e01b83526041600452602483fd5b604052825161165f816119dd565b81526020838101519082015260408301516002811061167c578283fd5b604082015261168d6060840161149e565b60608201529392505050565b6000602082840312156116aa578081fd5b5035919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b80516001600160a01b031682526020808201519083015260408101516002811061171457634e487b7160e01b600052602160045260246000fd5b60408301526060908101511515910152565b8183823760009101908152919050565b60006060820186835260208681850152606060408501528185835260808501905060808660051b860101925086845b878110156117d157868503607f190183528135368a9003601e1901811261178a578687fd5b8901803567ffffffffffffffff8111156117a2578788fd5b8036038b13156117b0578788fd5b6117bd87828885016116b1565b965050509183019190830190600101611765565b50929998505050505050505050565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b60208082526010908201526f42523a205a45524f5f4144445245535360801b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600f908201526e10948e8816915493d7d05353d55395608a1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60c0810161192582866116da565b6001600160a01b0393909316608082015260a00152919050565b60a0810161194d82856116da565b8260808301529392505050565b6000821982111561196d5761196d6119c7565b500190565b600082821015611984576119846119c7565b500390565b600060ff821660ff8416808210156119a3576119a36119c7565b90039392505050565b60006000198214156119c0576119c06119c7565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b0381168114610d9657600080fdfea264697066735822122005b5a4e3b4cebf1ae9def02c3ca668c11366ee5ce82a96dfa1c4b7c3449057d864736f6c63430008040033",
  "libraries": {
    "RToken": "0x8DfecB75FbAEDFA2b8E9b8092c9a601F90A462C9"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCosignerManager(address)": {
        "details": "This should be the contract responsible for sign by behalf of the payloads",
        "params": {
          "newCosignerManager": "address of cosigner manager contract"
        }
      },
      "setTokenManager(address)": {
        "details": "This should be the contract responsible for checking and add tokens to crosschain mapping",
        "params": {
          "newTokenManager": "address of token manager contract"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "setCosignerManager(address)": {
        "notice": "Set the cosigner manager, callable only by cosigners"
      },
      "setTokenManager(address)": {
        "notice": "Set the token manager, callable only by cosigners"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1060,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 297,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 340,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 191,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 282,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2546,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_nonces",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2550,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_commitments",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 2553,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "cosignerManager",
        "offset": 0,
        "slot": "203",
        "type": "t_contract(IBridgeCosignerManager)3069"
      },
      {
        "astId": 2556,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "tokenManager",
        "offset": 0,
        "slot": "204",
        "type": "t_contract(IBridgeTokenManager)3141"
      },
      {
        "astId": 2558,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "_chainId",
        "offset": 0,
        "slot": "205",
        "type": "t_uint256"
      },
      {
        "astId": 2567,
        "contract": "contracts/BridgeRouter.sol:BridgeRouter",
        "label": "__gap",
        "offset": 0,
        "slot": "206",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IBridgeCosignerManager)3069": {
        "encoding": "inplace",
        "label": "contract IBridgeCosignerManager",
        "numberOfBytes": "20"
      },
      "t_contract(IBridgeTokenManager)3141": {
        "encoding": "inplace",
        "label": "contract IBridgeTokenManager",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}