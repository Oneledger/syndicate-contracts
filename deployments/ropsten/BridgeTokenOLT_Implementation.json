{
  "address": "0x6b331d306Dc151ceC8091171cDfe942A82e25711",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amnt",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amnt",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8afa67b111a6ca8cfbc0bdd3087032edc0079546b41b9fc3ac831420308772b2",
  "receipt": {
    "to": null,
    "from": "0x6038495C883f5Ddc4e7D90aE2B9b8DfB25A242e0",
    "contractAddress": "0x6b331d306Dc151ceC8091171cDfe942A82e25711",
    "transactionIndex": 1,
    "gasUsed": "2122041",
    "logsBloom": "0x
    "blockHash": "0x24ec7c392fb514d4d3b0ab44cb7ef5df05eebb9df2b23d738d9bb707251b668a",
    "transactionHash": "0x8afa67b111a6ca8cfbc0bdd3087032edc0079546b41b9fc3ac831420308772b2",
    "logs": [],
    "blockNumber": 11283666,
    "cumulativeGasUsed": "2167906",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f0e0b0e3dce27ec1ca1d43bab617739e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amnt\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amnt\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"This is calculated at runtime because the token name may change\"},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `_spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(address,uint256)\":{\"details\":\"Emits a {Transfer} event with `to` set to the zero address. Requirements: - `_from` cannot be the zero address. - `_from` must have at least `_amnt` tokens.\",\"params\":{\"_amnt\":\"The amount of tokens to be destroyed\",\"_from\":\"The address from which to destroy the tokens\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `_spender` cannot be the zero address. - `_spender` must have allowance for the caller of at least `_subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `_spender` cannot be the zero address.\"},\"mint(address,uint256)\":{\"details\":\"Emits a {Transfer} event with `from` set to the zero address. Requirements: - `to` cannot be the zero address.\",\"params\":{\"_amnt\":\"The amount of tokens to be minted\",\"_to\":\"The destination address\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `_recipient` cannot be the zero address. - the caller must have a balance of at least `_amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `_sender` and `recipient` cannot be the zero address. - `_sender` must have a balance of at least `amount`. - the caller must have allowance for ``_sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(address,uint256)\":{\"notice\":\"Destroys `_amnt` tokens from `_from`, reducing the total supply.\"},\"mint(address,uint256)\":{\"notice\":\"Creates `_amnt` tokens and assigns them to `_to`, increasing the total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/tokens/BridgeToken.sol\":\"BridgeToken\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x35b09b69aca3bc2633da8f47382a81ecf367efe57167a2114f60f9ec81988afa\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8b2abd85d0ece7e866e100e9d47ca9cbec93c87cf71a8d267b2b93eb81f7d5e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x062b5a0f7cc6b0528fa350033759f3a15ba42afb57423d7c593753860f2c82e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8666f020bd8fc9dc14f07e2ebc52b5f236ab4cdde7c77679b08cb2f94730043b\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBridgeToken is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n\\n    function burn(address from, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x2fcef94e226e6c3f3c4be1145ccaa6211eac01448fb0bb61fc0296d90583190a\",\"license\":\"MIT\"},\"contracts/tokens/BridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\n\\nimport \\\"../interfaces/IBridgeToken.sol\\\";\\nimport \\\"../versions/Version0.sol\\\";\\n\\ncontract BridgeToken is Version0, IBridgeToken, OwnableUpgradeable {\\n    // ============ Memory ============\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private balances;\\n\\n    mapping(address => mapping(address => uint256)) private allowances;\\n\\n    uint256 private supply;\\n\\n    struct Token {\\n        string name;\\n        string symbol;\\n        uint8 decimals;\\n    }\\n\\n    Token internal token;\\n\\n    uint256[49] private __gap;\\n\\n    // ============ Initializer ============\\n\\n    function initialize(\\n        string calldata _name,\\n        string calldata _symbol,\\n        uint8 _decimals\\n    ) public initializer {\\n        __Ownable_init();\\n        token.name = _name;\\n        token.symbol = _symbol;\\n        token.decimals = _decimals;\\n    }\\n\\n    // ============ External Functions ============\\n\\n    /** @notice Creates `_amnt` tokens and assigns them to `_to`, increasing\\n     * the total supply.\\n     * @dev Emits a {Transfer} event with `from` set to the zero address.\\n     * Requirements:\\n     * - `to` cannot be the zero address.\\n     * @param _to The destination address\\n     * @param _amnt The amount of tokens to be minted\\n     */\\n    function mint(address _to, uint256 _amnt) external override onlyOwner {\\n        _mint(_to, _amnt);\\n    }\\n\\n    /**\\n     * @notice Destroys `_amnt` tokens from `_from`, reducing the\\n     * total supply.\\n     * @dev Emits a {Transfer} event with `to` set to the zero address.\\n     * Requirements:\\n     * - `_from` cannot be the zero address.\\n     * - `_from` must have at least `_amnt` tokens.\\n     * @param _from The address from which to destroy the tokens\\n     * @param _amnt The amount of tokens to be destroyed\\n     */\\n    function burn(address _from, uint256 _amnt) external override onlyOwner {\\n        _burn(_from, _amnt);\\n    }\\n\\n    /**\\n     * @dev This is calculated at runtime\\n     * because the token name may change\\n     */\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32) {\\n        uint256 _chainId;\\n        assembly {\\n            _chainId := chainid()\\n        }\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n                    ),\\n                    keccak256(bytes(token.name)),\\n                    keccak256(abi.encodePacked(VERSION)),\\n                    _chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    // ============ ERC 20 ============\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view override returns (string memory) {\\n        return token.name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view override returns (string memory) {\\n        return token.symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view override returns (uint8) {\\n        return token.decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `_recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `_amount`.\\n     */\\n    function transfer(address _recipient, uint256 _amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _transfer(_msgSender(), _recipient, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the zero address.\\n     */\\n    function approve(address _spender, uint256 _amount)\\n        public\\n        virtual\\n        override\\n        returns (bool)\\n    {\\n        _approve(_msgSender(), _spender, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `_sender` and `recipient` cannot be the zero address.\\n     * - `_sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``_sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    ) public virtual override returns (bool) {\\n        _transfer(_sender, _recipient, _amount);\\n        _approve(\\n            _sender,\\n            _msgSender(),\\n            allowances[_sender][_msgSender()].sub(\\n                _amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address _spender, uint256 _addedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            _spender,\\n            allowances[_msgSender()][_spender].add(_addedValue)\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `_spender` cannot be the zero address.\\n     * - `_spender` must have allowance for the caller of at least\\n     * `_subtractedValue`.\\n     */\\n    function decreaseAllowance(address _spender, uint256 _subtractedValue)\\n        public\\n        virtual\\n        returns (bool)\\n    {\\n        _approve(\\n            _msgSender(),\\n            _spender,\\n            allowances[_msgSender()][_spender].sub(\\n                _subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view override returns (uint256) {\\n        return supply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address _account)\\n        public\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return balances[_account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address _owner, address _spender)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return allowances[_owner][_spender];\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `_sender` to `_recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_sender` cannot be the zero address.\\n     * - `_recipient` cannot be the zero address.\\n     * - `_sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address _sender,\\n        address _recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(_sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(\\n            _recipient != address(0),\\n            \\\"ERC20: transfer to the zero address\\\"\\n        );\\n\\n        _beforeTokenTransfer(_sender, _recipient, amount);\\n\\n        balances[_sender] = balances[_sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        balances[_recipient] = balances[_recipient].add(amount);\\n        emit Transfer(_sender, _recipient, amount);\\n    }\\n\\n    /** @dev Creates `_amount` tokens and assigns them to `_account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address _account, uint256 _amount) internal virtual {\\n        require(_account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), _account, _amount);\\n\\n        supply = supply.add(_amount);\\n        balances[_account] = balances[_account].add(_amount);\\n        emit Transfer(address(0), _account, _amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `_amount` tokens from `_account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `_account` cannot be the zero address.\\n     * - `_account` must have at least `_amount` tokens.\\n     */\\n    function _burn(address _account, uint256 _amount) internal virtual {\\n        require(_account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(_account, address(0), _amount);\\n\\n        balances[_account] = balances[_account].sub(\\n            _amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        supply = supply.sub(_amount);\\n        emit Transfer(_account, address(0), _amount);\\n    }\\n\\n    /**\\n     * @dev Sets `_amount` as the allowance of `_spender` over the `_owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `_owner` cannot be the zero address.\\n     * - `_spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address _owner,\\n        address _spender,\\n        uint256 _amount\\n    ) internal virtual {\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        allowances[_owner][_spender] = _amount;\\n        emit Approval(_owner, _spender, _amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals_} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals_} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal {\\n        token.decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `_from` and `_to` are both non-zero, `_amount` of ``_from``'s tokens\\n     * will be to transferred to `_to`.\\n     * - when `_from` is zero, `_amount` tokens will be minted for `_to`.\\n     * - when `_to` is zero, `_amount` of ``_from``'s tokens will be burned.\\n     * - `_from` and `_to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x04b4e77dd6e789c254ca4a61dd8a995c2c9879242de4ac010a541ecf6bbea4c9\",\"license\":\"MIT\"},\"contracts/versions/Version0.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0 <0.9.0;\\n\\n/**\\n * @title Version0\\n * @notice Version getter for contracts\\n **/\\ncontract Version0 {\\n    uint8 public constant VERSION = 0;\\n}\\n\",\"keccak256\":\"0x5f886e6ab076b7dbea9e4ab4d7084d94e2d643c61dc353334293192d33156851\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612595806100206000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063a457c2d711610071578063a457c2d7146102f8578063a9059cbb14610328578063dd62ed3e14610358578063f2fde38b14610388578063ffa1ad74146103a457610121565b806370a0823114610266578063715018a6146102965780638da5cb5b146102a057806395d89b41146102be5780639dc29fac146102dc57610121565b806323b872dd116100f457806323b872dd146101ae578063313ce567146101de5780633644e515146101fc578063395093511461021a57806340c10f191461024a57610121565b806306fdde0314610126578063095ea7b3146101445780631624f6c61461017457806318160ddd14610190575b600080fd5b61012e6103c2565b60405161013b9190611e7a565b60405180910390f35b61015e60048036038101906101599190611a8a565b610457565b60405161016b9190611df1565b60405180910390f35b61018e60048036038101906101899190611ac6565b610475565b005b6101986105a3565b6040516101a59190611fbc565b60405180910390f35b6101c860048036038101906101c39190611a3b565b6105ad565b6040516101d59190611df1565b60405180910390f35b6101e6610686565b6040516101f39190611fd7565b60405180910390f35b6102046106a0565b6040516102119190611e0c565b60405180910390f35b610234600480360381019061022f9190611a8a565b61073b565b6040516102419190611df1565b60405180910390f35b610264600480360381019061025f9190611a8a565b6107ee565b005b610280600480360381019061027b91906119d6565b610878565b60405161028d9190611fbc565b60405180910390f35b61029e6108c1565b005b6102a8610949565b6040516102b59190611dd6565b60405180910390f35b6102c6610973565b6040516102d39190611e7a565b60405180910390f35b6102f660048036038101906102f19190611a8a565b610a08565b005b610312600480360381019061030d9190611a8a565b610a92565b60405161031f9190611df1565b60405180910390f35b610342600480360381019061033d9190611a8a565b610b5f565b60405161034f9190611df1565b60405180910390f35b610372600480360381019061036d91906119ff565b610b7d565b60405161037f9190611fbc565b60405180910390f35b6103a2600480360381019061039d91906119d6565b610c04565b005b6103ac610cfc565b6040516103b99190611fd7565b60405180910390f35b6060606860000180546103d49061214a565b80601f01602080910402602001604051908101604052809291908181526020018280546104009061214a565b801561044d5780601f106104225761010080835404028352916020019161044d565b820191906000526020600020905b81548152906001019060200180831161043057829003601f168201915b5050505050905090565b600061046b610464610d01565b8484610d09565b6001905092915050565b600060019054906101000a900460ff168061049b575060008054906101000a900460ff16155b6104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d190611efc565b60405180910390fd5b60008060019054906101000a900460ff16159050801561052a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610532610ed4565b8585606860000191906105469291906118aa565b5083836068600101919061055b9291906118aa565b5081606860020160006101000a81548160ff021916908360ff160217905550801561059b5760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000606754905090565b60006105ba848484610fbd565b61067b846105c6610d01565b6106768560405180606001604052806028815260200161251360289139606660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062c610d01565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112569092919063ffffffff16565b610d09565b600190509392505050565b6000606860020160009054906101000a900460ff16905090565b6000804690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60686000016040516106d99190611da4565b604051809103902060006040516020016106f39190611dbb565b60405160208183030381529060405280519060200120833060405160200161071f959493929190611e27565b6040516020818303038152906040528051906020012091505090565b60006107e4610748610d01565b846107df8560666000610759610d01565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112ab90919063ffffffff16565b610d09565b6001905092915050565b6107f6610d01565b73ffffffffffffffffffffffffffffffffffffffff16610814610949565b73ffffffffffffffffffffffffffffffffffffffff161461086a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086190611f1c565b60405180910390fd5b61087482826112c1565b5050565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108c9610d01565b73ffffffffffffffffffffffffffffffffffffffff166108e7610949565b73ffffffffffffffffffffffffffffffffffffffff161461093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093490611f1c565b60405180910390fd5b6109476000611457565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060606860010180546109859061214a565b80601f01602080910402602001604051908101604052809291908181526020018280546109b19061214a565b80156109fe5780601f106109d3576101008083540402835291602001916109fe565b820191906000526020600020905b8154815290600101906020018083116109e157829003601f168201915b5050505050905090565b610a10610d01565b73ffffffffffffffffffffffffffffffffffffffff16610a2e610949565b73ffffffffffffffffffffffffffffffffffffffff1614610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b90611f1c565b60405180910390fd5b610a8e828261151d565b5050565b6000610b55610a9f610d01565b84610b508560405180606001604052806025815260200161253b6025913960666000610ac9610d01565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112569092919063ffffffff16565b610d09565b6001905092915050565b6000610b73610b6c610d01565b8484610fbd565b6001905092915050565b6000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610c0c610d01565b73ffffffffffffffffffffffffffffffffffffffff16610c2a610949565b73ffffffffffffffffffffffffffffffffffffffff1614610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790611f1c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce790611ebc565b60405180910390fd5b610cf981611457565b50565b600081565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7090611f7c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de090611edc565b60405180910390fd5b80606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610ec79190611fbc565b60405180910390a3505050565b600060019054906101000a900460ff1680610efa575060008054906101000a900460ff16155b610f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3090611efc565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f89576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610f916116cd565b610f996117a6565b8015610fba5760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490611f5c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561109d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109490611e9c565b60405180910390fd5b6110a883838361188f565b611114816040518060600160405280602681526020016124ed60269139606560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112569092919063ffffffff16565b606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111a981606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112ab90919063ffffffff16565b606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112499190611fbc565b60405180910390a3505050565b600083831115829061129e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112959190611e7a565b60405180910390fd5b5082840390509392505050565b600081836112b9919061202e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132890611f9c565b60405180910390fd5b61133d6000838361188f565b611352816067546112ab90919063ffffffff16565b6067819055506113aa81606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112ab90919063ffffffff16565b606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161144b9190611fbc565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158490611f3c565b60405180910390fd5b6115998260008361188f565b611605816040518060600160405280602281526020016124cb60229139606560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112569092919063ffffffff16565b606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061165d8160675461189490919063ffffffff16565b606781905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116c19190611fbc565b60405180910390a35050565b600060019054906101000a900460ff16806116f3575060008054906101000a900460ff16155b611732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172990611efc565b60405180910390fd5b60008060019054906101000a900460ff161590508015611782576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156117a35760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806117cc575060008054906101000a900460ff16155b61180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290611efc565b60405180910390fd5b60008060019054906101000a900460ff16159050801561185b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61186b611866610d01565b611457565b801561188c5760008060016101000a81548160ff0219169083151502179055505b50565b505050565b600081836118a29190612084565b905092915050565b8280546118b69061214a565b90600052602060002090601f0160209004810192826118d8576000855561191f565b82601f106118f157803560ff191683800117855561191f565b8280016001018555821561191f579182015b8281111561191e578235825591602001919060010190611903565b5b50905061192c9190611930565b5090565b5b80821115611949576000816000905550600101611931565b5090565b60008135905061195c81612485565b92915050565b60008083601f84011261197457600080fd5b8235905067ffffffffffffffff81111561198d57600080fd5b6020830191508360018202830111156119a557600080fd5b9250929050565b6000813590506119bb8161249c565b92915050565b6000813590506119d0816124b3565b92915050565b6000602082840312156119e857600080fd5b60006119f68482850161194d565b91505092915050565b60008060408385031215611a1257600080fd5b6000611a208582860161194d565b9250506020611a318582860161194d565b9150509250929050565b600080600060608486031215611a5057600080fd5b6000611a5e8682870161194d565b9350506020611a6f8682870161194d565b9250506040611a80868287016119ac565b9150509250925092565b60008060408385031215611a9d57600080fd5b6000611aab8582860161194d565b9250506020611abc858286016119ac565b9150509250929050565b600080600080600060608688031215611ade57600080fd5b600086013567ffffffffffffffff811115611af857600080fd5b611b0488828901611962565b9550955050602086013567ffffffffffffffff811115611b2357600080fd5b611b2f88828901611962565b93509350506040611b42888289016119c1565b9150509295509295909350565b611b58816120b8565b82525050565b611b67816120ca565b82525050565b611b76816120d6565b82525050565b60008154611b898161214a565b611b938186612012565b94506001821660008114611bae5760018114611bbf57611bf2565b60ff19831686528186019350611bf2565b611bc885611ff2565b60005b83811015611bea57815481890152600182019150602081019050611bcb565b838801955050505b50505092915050565b6000611c0682612007565b611c10818561201d565b9350611c20818560208601612117565b611c29816121ec565b840191505092915050565b6000611c4160238361201d565b9150611c4c8261220a565b604082019050919050565b6000611c6460268361201d565b9150611c6f82612259565b604082019050919050565b6000611c8760228361201d565b9150611c92826122a8565b604082019050919050565b6000611caa602e8361201d565b9150611cb5826122f7565b604082019050919050565b6000611ccd60208361201d565b9150611cd882612346565b602082019050919050565b6000611cf060218361201d565b9150611cfb8261236f565b604082019050919050565b6000611d1360258361201d565b9150611d1e826123be565b604082019050919050565b6000611d3660248361201d565b9150611d418261240d565b604082019050919050565b6000611d59601f8361201d565b9150611d648261245c565b602082019050919050565b611d7881612100565b82525050565b611d878161210a565b82525050565b611d9e611d998261210a565b61217c565b82525050565b6000611db08284611b7c565b915081905092915050565b6000611dc78284611d8d565b60018201915081905092915050565b6000602082019050611deb6000830184611b4f565b92915050565b6000602082019050611e066000830184611b5e565b92915050565b6000602082019050611e216000830184611b6d565b92915050565b600060a082019050611e3c6000830188611b6d565b611e496020830187611b6d565b611e566040830186611b6d565b611e636060830185611d6f565b611e706080830184611b4f565b9695505050505050565b60006020820190508181036000830152611e948184611bfb565b905092915050565b60006020820190508181036000830152611eb581611c34565b9050919050565b60006020820190508181036000830152611ed581611c57565b9050919050565b60006020820190508181036000830152611ef581611c7a565b9050919050565b60006020820190508181036000830152611f1581611c9d565b9050919050565b60006020820190508181036000830152611f3581611cc0565b9050919050565b60006020820190508181036000830152611f5581611ce3565b9050919050565b60006020820190508181036000830152611f7581611d06565b9050919050565b60006020820190508181036000830152611f9581611d29565b9050919050565b60006020820190508181036000830152611fb581611d4c565b9050919050565b6000602082019050611fd16000830184611d6f565b92915050565b6000602082019050611fec6000830184611d7e565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061203982612100565b915061204483612100565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120795761207861218e565b5b828201905092915050565b600061208f82612100565b915061209a83612100565b9250828210156120ad576120ac61218e565b5b828203905092915050565b60006120c3826120e0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561213557808201518184015260208101905061211a565b83811115612144576000848401525b50505050565b6000600282049050600182168061216257607f821691505b60208210811415612176576121756121bd565b5b50919050565b6000612187826121fd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160f81b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61248e816120b8565b811461249957600080fd5b50565b6124a581612100565b81146124b057600080fd5b50565b6124bc8161210a565b81146124c757600080fd5b5056fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220432abbfae82489df5bf8df9e59a416f502fbf04c6490cb4596db84f58c52a27064736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063a457c2d711610071578063a457c2d7146102f8578063a9059cbb14610328578063dd62ed3e14610358578063f2fde38b14610388578063ffa1ad74146103a457610121565b806370a0823114610266578063715018a6146102965780638da5cb5b146102a057806395d89b41146102be5780639dc29fac146102dc57610121565b806323b872dd116100f457806323b872dd146101ae578063313ce567146101de5780633644e515146101fc578063395093511461021a57806340c10f191461024a57610121565b806306fdde0314610126578063095ea7b3146101445780631624f6c61461017457806318160ddd14610190575b600080fd5b61012e6103c2565b60405161013b9190611e7a565b60405180910390f35b61015e60048036038101906101599190611a8a565b610457565b60405161016b9190611df1565b60405180910390f35b61018e60048036038101906101899190611ac6565b610475565b005b6101986105a3565b6040516101a59190611fbc565b60405180910390f35b6101c860048036038101906101c39190611a3b565b6105ad565b6040516101d59190611df1565b60405180910390f35b6101e6610686565b6040516101f39190611fd7565b60405180910390f35b6102046106a0565b6040516102119190611e0c565b60405180910390f35b610234600480360381019061022f9190611a8a565b61073b565b6040516102419190611df1565b60405180910390f35b610264600480360381019061025f9190611a8a565b6107ee565b005b610280600480360381019061027b91906119d6565b610878565b60405161028d9190611fbc565b60405180910390f35b61029e6108c1565b005b6102a8610949565b6040516102b59190611dd6565b60405180910390f35b6102c6610973565b6040516102d39190611e7a565b60405180910390f35b6102f660048036038101906102f19190611a8a565b610a08565b005b610312600480360381019061030d9190611a8a565b610a92565b60405161031f9190611df1565b60405180910390f35b610342600480360381019061033d9190611a8a565b610b5f565b60405161034f9190611df1565b60405180910390f35b610372600480360381019061036d91906119ff565b610b7d565b60405161037f9190611fbc565b60405180910390f35b6103a2600480360381019061039d91906119d6565b610c04565b005b6103ac610cfc565b6040516103b99190611fd7565b60405180910390f35b6060606860000180546103d49061214a565b80601f01602080910402602001604051908101604052809291908181526020018280546104009061214a565b801561044d5780601f106104225761010080835404028352916020019161044d565b820191906000526020600020905b81548152906001019060200180831161043057829003601f168201915b5050505050905090565b600061046b610464610d01565b8484610d09565b6001905092915050565b600060019054906101000a900460ff168061049b575060008054906101000a900460ff16155b6104da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d190611efc565b60405180910390fd5b60008060019054906101000a900460ff16159050801561052a576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610532610ed4565b8585606860000191906105469291906118aa565b5083836068600101919061055b9291906118aa565b5081606860020160006101000a81548160ff021916908360ff160217905550801561059b5760008060016101000a81548160ff0219169083151502179055505b505050505050565b6000606754905090565b60006105ba848484610fbd565b61067b846105c6610d01565b6106768560405180606001604052806028815260200161251360289139606660008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061062c610d01565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112569092919063ffffffff16565b610d09565b600190509392505050565b6000606860020160009054906101000a900460ff16905090565b6000804690507f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60686000016040516106d99190611da4565b604051809103902060006040516020016106f39190611dbb565b60405160208183030381529060405280519060200120833060405160200161071f959493929190611e27565b6040516020818303038152906040528051906020012091505090565b60006107e4610748610d01565b846107df8560666000610759610d01565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112ab90919063ffffffff16565b610d09565b6001905092915050565b6107f6610d01565b73ffffffffffffffffffffffffffffffffffffffff16610814610949565b73ffffffffffffffffffffffffffffffffffffffff161461086a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086190611f1c565b60405180910390fd5b61087482826112c1565b5050565b6000606560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108c9610d01565b73ffffffffffffffffffffffffffffffffffffffff166108e7610949565b73ffffffffffffffffffffffffffffffffffffffff161461093d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093490611f1c565b60405180910390fd5b6109476000611457565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060606860010180546109859061214a565b80601f01602080910402602001604051908101604052809291908181526020018280546109b19061214a565b80156109fe5780601f106109d3576101008083540402835291602001916109fe565b820191906000526020600020905b8154815290600101906020018083116109e157829003601f168201915b5050505050905090565b610a10610d01565b73ffffffffffffffffffffffffffffffffffffffff16610a2e610949565b73ffffffffffffffffffffffffffffffffffffffff1614610a84576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a7b90611f1c565b60405180910390fd5b610a8e828261151d565b5050565b6000610b55610a9f610d01565b84610b508560405180606001604052806025815260200161253b6025913960666000610ac9610d01565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112569092919063ffffffff16565b610d09565b6001905092915050565b6000610b73610b6c610d01565b8484610fbd565b6001905092915050565b6000606660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b610c0c610d01565b73ffffffffffffffffffffffffffffffffffffffff16610c2a610949565b73ffffffffffffffffffffffffffffffffffffffff1614610c80576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7790611f1c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610cf0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce790611ebc565b60405180910390fd5b610cf981611457565b50565b600081565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610d79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7090611f7c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610de9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610de090611edc565b60405180910390fd5b80606660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610ec79190611fbc565b60405180910390a3505050565b600060019054906101000a900460ff1680610efa575060008054906101000a900460ff16155b610f39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3090611efc565b60405180910390fd5b60008060019054906101000a900460ff161590508015610f89576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b610f916116cd565b610f996117a6565b8015610fba5760008060016101000a81548160ff0219169083151502179055505b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561102d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161102490611f5c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561109d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109490611e9c565b60405180910390fd5b6110a883838361188f565b611114816040518060600160405280602681526020016124ed60269139606560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112569092919063ffffffff16565b606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506111a981606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112ab90919063ffffffff16565b606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516112499190611fbc565b60405180910390a3505050565b600083831115829061129e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112959190611e7a565b60405180910390fd5b5082840390509392505050565b600081836112b9919061202e565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611331576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161132890611f9c565b60405180910390fd5b61133d6000838361188f565b611352816067546112ab90919063ffffffff16565b6067819055506113aa81606560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112ab90919063ffffffff16565b606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161144b9190611fbc565b60405180910390a35050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158490611f3c565b60405180910390fd5b6115998260008361188f565b611605816040518060600160405280602281526020016124cb60229139606560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546112569092919063ffffffff16565b606560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061165d8160675461189490919063ffffffff16565b606781905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516116c19190611fbc565b60405180910390a35050565b600060019054906101000a900460ff16806116f3575060008054906101000a900460ff16155b611732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161172990611efc565b60405180910390fd5b60008060019054906101000a900460ff161590508015611782576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b80156117a35760008060016101000a81548160ff0219169083151502179055505b50565b600060019054906101000a900460ff16806117cc575060008054906101000a900460ff16155b61180b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161180290611efc565b60405180910390fd5b60008060019054906101000a900460ff16159050801561185b576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61186b611866610d01565b611457565b801561188c5760008060016101000a81548160ff0219169083151502179055505b50565b505050565b600081836118a29190612084565b905092915050565b8280546118b69061214a565b90600052602060002090601f0160209004810192826118d8576000855561191f565b82601f106118f157803560ff191683800117855561191f565b8280016001018555821561191f579182015b8281111561191e578235825591602001919060010190611903565b5b50905061192c9190611930565b5090565b5b80821115611949576000816000905550600101611931565b5090565b60008135905061195c81612485565b92915050565b60008083601f84011261197457600080fd5b8235905067ffffffffffffffff81111561198d57600080fd5b6020830191508360018202830111156119a557600080fd5b9250929050565b6000813590506119bb8161249c565b92915050565b6000813590506119d0816124b3565b92915050565b6000602082840312156119e857600080fd5b60006119f68482850161194d565b91505092915050565b60008060408385031215611a1257600080fd5b6000611a208582860161194d565b9250506020611a318582860161194d565b9150509250929050565b600080600060608486031215611a5057600080fd5b6000611a5e8682870161194d565b9350506020611a6f8682870161194d565b9250506040611a80868287016119ac565b9150509250925092565b60008060408385031215611a9d57600080fd5b6000611aab8582860161194d565b9250506020611abc858286016119ac565b9150509250929050565b600080600080600060608688031215611ade57600080fd5b600086013567ffffffffffffffff811115611af857600080fd5b611b0488828901611962565b9550955050602086013567ffffffffffffffff811115611b2357600080fd5b611b2f88828901611962565b93509350506040611b42888289016119c1565b9150509295509295909350565b611b58816120b8565b82525050565b611b67816120ca565b82525050565b611b76816120d6565b82525050565b60008154611b898161214a565b611b938186612012565b94506001821660008114611bae5760018114611bbf57611bf2565b60ff19831686528186019350611bf2565b611bc885611ff2565b60005b83811015611bea57815481890152600182019150602081019050611bcb565b838801955050505b50505092915050565b6000611c0682612007565b611c10818561201d565b9350611c20818560208601612117565b611c29816121ec565b840191505092915050565b6000611c4160238361201d565b9150611c4c8261220a565b604082019050919050565b6000611c6460268361201d565b9150611c6f82612259565b604082019050919050565b6000611c8760228361201d565b9150611c92826122a8565b604082019050919050565b6000611caa602e8361201d565b9150611cb5826122f7565b604082019050919050565b6000611ccd60208361201d565b9150611cd882612346565b602082019050919050565b6000611cf060218361201d565b9150611cfb8261236f565b604082019050919050565b6000611d1360258361201d565b9150611d1e826123be565b604082019050919050565b6000611d3660248361201d565b9150611d418261240d565b604082019050919050565b6000611d59601f8361201d565b9150611d648261245c565b602082019050919050565b611d7881612100565b82525050565b611d878161210a565b82525050565b611d9e611d998261210a565b61217c565b82525050565b6000611db08284611b7c565b915081905092915050565b6000611dc78284611d8d565b60018201915081905092915050565b6000602082019050611deb6000830184611b4f565b92915050565b6000602082019050611e066000830184611b5e565b92915050565b6000602082019050611e216000830184611b6d565b92915050565b600060a082019050611e3c6000830188611b6d565b611e496020830187611b6d565b611e566040830186611b6d565b611e636060830185611d6f565b611e706080830184611b4f565b9695505050505050565b60006020820190508181036000830152611e948184611bfb565b905092915050565b60006020820190508181036000830152611eb581611c34565b9050919050565b60006020820190508181036000830152611ed581611c57565b9050919050565b60006020820190508181036000830152611ef581611c7a565b9050919050565b60006020820190508181036000830152611f1581611c9d565b9050919050565b60006020820190508181036000830152611f3581611cc0565b9050919050565b60006020820190508181036000830152611f5581611ce3565b9050919050565b60006020820190508181036000830152611f7581611d06565b9050919050565b60006020820190508181036000830152611f9581611d29565b9050919050565b60006020820190508181036000830152611fb581611d4c565b9050919050565b6000602082019050611fd16000830184611d6f565b92915050565b6000602082019050611fec6000830184611d7e565b92915050565b60008190508160005260206000209050919050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061203982612100565b915061204483612100565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156120795761207861218e565b5b828201905092915050565b600061208f82612100565b915061209a83612100565b9250828210156120ad576120ac61218e565b5b828203905092915050565b60006120c3826120e0565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b8381101561213557808201518184015260208101905061211a565b83811115612144576000848401525b50505050565b6000600282049050600182168061216257607f821691505b60208210811415612176576121756121bd565b5b50919050565b6000612187826121fd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b60008160f81b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b61248e816120b8565b811461249957600080fd5b50565b6124a581612100565b81146124b057600080fd5b50565b6124bc8161210a565b81146124c757600080fd5b5056fe45524332303a206275726e20616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e636545524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e636545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa2646970667358221220432abbfae82489df5bf8df9e59a416f502fbf04c6490cb4596db84f58c52a27064736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "details": "This is calculated at runtime because the token name may change"
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `_spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(address,uint256)": {
        "details": "Emits a {Transfer} event with `to` set to the zero address. Requirements: - `_from` cannot be the zero address. - `_from` must have at least `_amnt` tokens.",
        "params": {
          "_amnt": "The amount of tokens to be destroyed",
          "_from": "The address from which to destroy the tokens"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `_spender` cannot be the zero address. - `_spender` must have allowance for the caller of at least `_subtractedValue`."
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `_spender` cannot be the zero address."
      },
      "mint(address,uint256)": {
        "details": "Emits a {Transfer} event with `from` set to the zero address. Requirements: - `to` cannot be the zero address.",
        "params": {
          "_amnt": "The amount of tokens to be minted",
          "_to": "The destination address"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `_recipient` cannot be the zero address. - the caller must have a balance of at least `_amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `_sender` and `recipient` cannot be the zero address. - `_sender` must have a balance of at least `amount`. - the caller must have allowance for ``_sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "burn(address,uint256)": {
        "notice": "Destroys `_amnt` tokens from `_from`, reducing the total supply."
      },
      "mint(address,uint256)": {
        "notice": "Creates `_amnt` tokens and assigns them to `_to`, increasing the total supply."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 384,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 123,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4415,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "balances",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4421,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "allowances",
        "offset": 0,
        "slot": "102",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4423,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "supply",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 4433,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "token",
        "offset": 0,
        "slot": "104",
        "type": "t_struct(Token)4430_storage"
      },
      {
        "astId": 4437,
        "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
        "label": "__gap",
        "offset": 0,
        "slot": "107",
        "type": "t_array(t_uint256)49_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Token)4430_storage": {
        "encoding": "inplace",
        "label": "struct BridgeToken.Token",
        "members": [
          {
            "astId": 4425,
            "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
            "label": "name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 4427,
            "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
            "label": "symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 4429,
            "contract": "contracts/tokens/BridgeToken.sol:BridgeToken",
            "label": "decimals",
            "offset": 0,
            "slot": "2",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}