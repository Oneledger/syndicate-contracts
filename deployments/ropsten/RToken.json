{
  "address": "0x6647B08e93259f60B8913502d7f231f43204A1c6",
  "abi": [],
  "transactionHash": "0xc6ff31b2d5e999d6fda19dcc739cc6c400d39eafeef004cd9efee03749bc36ec",
  "receipt": {
    "to": null,
    "from": "0xC79CbD496f55bb7a21ffE51c32CD7Ee699AD25dD",
    "contractAddress": "0x6647B08e93259f60B8913502d7f231f43204A1c6",
    "transactionIndex": 0,
    "gasUsed": "589899",
    "logsBloom": "0x
    "blockHash": "0x499f6891f521142269233a073bdff8194dfcce3ad6de4ace0cf5300a9c0526a1",
    "transactionHash": "0xc6ff31b2d5e999d6fda19dcc739cc6c400d39eafeef004cd9efee03749bc36ec",
    "logs": [],
    "blockNumber": 11302261,
    "cumulativeGasUsed": "589899",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "194134fc031940f179c39ca2faff4e88",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/library/RToken.sol\":\"RToken\"},\"evmVersion\":\"berlin\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x02348b2e4b9f3200c7e3907c5c2661643a6d8520e9f79939fbb9b4005a54894d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/interfaces/IBridgeToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\ninterface IBridgeToken {\\n    function burn(address from, uint256 amount) external;\\n\\n    function mint(address to, uint256 amount) external;\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x5da30954f099315154d694061fef990ffd9e5df7c9b356765c2ce99b798b4783\",\"license\":\"MIT\"},\"contracts/library/RToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../interfaces/IBridgeToken.sol\\\";\\n\\nlibrary RToken {\\n    using SafeERC20 for IERC20;\\n\\n    enum IssueType {\\n        DEFAULT,\\n        MINTABLE\\n    }\\n\\n    struct Token {\\n        address addr;\\n        uint256 chainId;\\n        IssueType issueType;\\n        bool exist;\\n    }\\n\\n    function unsafeTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        require(from.balance >= amount, \\\"RT: INSUFFICIENT_BALANCE\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"RT: SEND_REVERT\\\");\\n    }\\n\\n    function enter(\\n        Token memory token,\\n        address to,\\n        uint256 amount\\n    ) public returns (Token memory) {\\n        require(token.exist, \\\"RT: NOT_LISTED\\\");\\n        if (token.issueType == IssueType.MINTABLE) {\\n            IBridgeToken(token.addr).burn(msg.sender, amount);\\n        } else if (token.issueType == IssueType.DEFAULT) {\\n            IERC20(token.addr).safeTransferFrom(msg.sender, to, amount);\\n        } else {\\n            assert(false);\\n        }\\n        return token;\\n    }\\n\\n    function exit(\\n        Token memory token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public returns (Token memory) {\\n        require(token.exist, \\\"RT: NOT_LISTED\\\");\\n        if (token.addr == address(0)) {\\n            unsafeTransfer(from, to, amount);\\n        } else if (token.issueType == IssueType.MINTABLE) {\\n            IBridgeToken(token.addr).mint(to, amount);\\n        } else if (token.issueType == IssueType.DEFAULT) {\\n            IERC20(token.addr).safeTransfer(to, amount);\\n        } else {\\n            assert(false);\\n        }\\n        return token;\\n    }\\n}\\n\",\"keccak256\":\"0x5ebd41f0bacf646f2431b70eb9cf9a6cc81c18a3943fccff68f44b8185ba8dd1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6109b561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063c5699e0714610045578063e6be99471461007b575b600080fd5b81801561005157600080fd5b5061006561006036600461085f565b61009b565b60405161007291906108ea565b60405180910390f35b81801561008757600080fd5b50610065610096366004610814565b610202565b60408051608081018252600080825260208201819052918101829052606081019190915283606001516101065760405162461bcd60e51b815260206004820152600e60248201526d14950e881393d517d31254d5115160921b60448201526064015b60405180910390fd5b60018460400151600181111561012c57634e487b7160e01b600052602160045260246000fd5b141561019a578351604051632770a7eb60e21b8152336004820152602481018490526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b505050506101f8565b6000846040015160018111156101c057634e487b7160e01b600052602160045260246000fd5b14156101e25783516101dd906001600160a01b0316338585610368565b6101f8565b634e487b7160e01b600052600160045260246000fd5b50825b9392505050565b60408051608081018252600080825260208201819052918101829052606081019190915284606001516102685760405162461bcd60e51b815260206004820152600e60248201526d14950e881393d517d31254d5115160921b60448201526064016100fd565b84516001600160a01b0316610287576102828484846103d9565b61035f565b6001856040015160018111156102ad57634e487b7160e01b600052602160045260246000fd5b141561031d5784516040516340c10f1960e01b81526001600160a01b03858116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b5050505061035f565b60008560400151600181111561034357634e487b7160e01b600052602160045260246000fd5b14156101e2578451610282906001600160a01b031684846104c8565b50929392505050565b6040516001600160a01b03808516602483015283166044820152606481018290526103d39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104fd565b50505050565b80836001600160a01b03163110156104335760405162461bcd60e51b815260206004820152601860248201527f52543a20494e53554646494349454e545f42414c414e4345000000000000000060448201526064016100fd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610480576040519150601f19603f3d011682016040523d82523d6000602084013e610485565b606091505b50509050806103d35760405162461bcd60e51b815260206004820152600f60248201526e14950e8814d1539117d49155915495608a1b60448201526064016100fd565b6040516001600160a01b0383166024820152604481018290526104f890849063a9059cbb60e01b9060640161039c565b505050565b6000610552826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105cf9092919063ffffffff16565b8051909150156104f8578080602001905181019061057091906107f8565b6104f85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100fd565b60606105de84846000856105e6565b949350505050565b6060824710156106475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100fd565b843b6106955760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100fd565b600080866001600160a01b031685876040516106b1919061089b565b60006040518083038185875af1925050503d80600081146106ee576040519150601f19603f3d011682016040523d82523d6000602084013e6106f3565b606091505b509150915061070382828661070e565b979650505050505050565b6060831561071d5750816101fb565b82511561072d5782518084602001fd5b8160405162461bcd60e51b81526004016100fd91906108b7565b80356001600160a01b038116811461075e57600080fd5b919050565b803561075e8161096e565b60006080828403121561077f578081fd5b6040516080810181811067ffffffffffffffff821117156107ae57634e487b7160e01b83526041600452602483fd5b6040529050806107bd83610747565b8152602083013560208201526040830135600281106107db57600080fd5b60408201526107ec60608401610763565b60608201525092915050565b600060208284031215610809578081fd5b81516101fb8161096e565b60008060008060e08587031215610829578283fd5b610833868661076e565b935061084160808601610747565b925061084f60a08601610747565b9396929550929360c00135925050565b600080600060c08486031215610873578283fd5b61087d858561076e565b925061088b60808501610747565b915060a084013590509250925092565b600082516108ad818460208701610942565b9190910192915050565b60208152600082518060208401526108d6816040850160208701610942565b601f01601f19169190910160400192915050565b81516001600160a01b0316815260208083015190820152604082015160808201906002811061092957634e487b7160e01b600052602160045260246000fd5b8060408401525060608301511515606083015292915050565b60005b8381101561095d578181015183820152602001610945565b838111156103d35750506000910152565b801515811461097c57600080fd5b5056fea2646970667358221220e586752d26339a62f0914b6db33373367a2e3cad8e750dffb93031e185d89ebe64736f6c63430008040033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c8063c5699e0714610045578063e6be99471461007b575b600080fd5b81801561005157600080fd5b5061006561006036600461085f565b61009b565b60405161007291906108ea565b60405180910390f35b81801561008757600080fd5b50610065610096366004610814565b610202565b60408051608081018252600080825260208201819052918101829052606081019190915283606001516101065760405162461bcd60e51b815260206004820152600e60248201526d14950e881393d517d31254d5115160921b60448201526064015b60405180910390fd5b60018460400151600181111561012c57634e487b7160e01b600052602160045260246000fd5b141561019a578351604051632770a7eb60e21b8152336004820152602481018490526001600160a01b0390911690639dc29fac90604401600060405180830381600087803b15801561017d57600080fd5b505af1158015610191573d6000803e3d6000fd5b505050506101f8565b6000846040015160018111156101c057634e487b7160e01b600052602160045260246000fd5b14156101e25783516101dd906001600160a01b0316338585610368565b6101f8565b634e487b7160e01b600052600160045260246000fd5b50825b9392505050565b60408051608081018252600080825260208201819052918101829052606081019190915284606001516102685760405162461bcd60e51b815260206004820152600e60248201526d14950e881393d517d31254d5115160921b60448201526064016100fd565b84516001600160a01b0316610287576102828484846103d9565b61035f565b6001856040015160018111156102ad57634e487b7160e01b600052602160045260246000fd5b141561031d5784516040516340c10f1960e01b81526001600160a01b03858116600483015260248201859052909116906340c10f1990604401600060405180830381600087803b15801561030057600080fd5b505af1158015610314573d6000803e3d6000fd5b5050505061035f565b60008560400151600181111561034357634e487b7160e01b600052602160045260246000fd5b14156101e2578451610282906001600160a01b031684846104c8565b50929392505050565b6040516001600160a01b03808516602483015283166044820152606481018290526103d39085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526104fd565b50505050565b80836001600160a01b03163110156104335760405162461bcd60e51b815260206004820152601860248201527f52543a20494e53554646494349454e545f42414c414e4345000000000000000060448201526064016100fd565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114610480576040519150601f19603f3d011682016040523d82523d6000602084013e610485565b606091505b50509050806103d35760405162461bcd60e51b815260206004820152600f60248201526e14950e8814d1539117d49155915495608a1b60448201526064016100fd565b6040516001600160a01b0383166024820152604481018290526104f890849063a9059cbb60e01b9060640161039c565b505050565b6000610552826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166105cf9092919063ffffffff16565b8051909150156104f8578080602001905181019061057091906107f8565b6104f85760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016100fd565b60606105de84846000856105e6565b949350505050565b6060824710156106475760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016100fd565b843b6106955760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016100fd565b600080866001600160a01b031685876040516106b1919061089b565b60006040518083038185875af1925050503d80600081146106ee576040519150601f19603f3d011682016040523d82523d6000602084013e6106f3565b606091505b509150915061070382828661070e565b979650505050505050565b6060831561071d5750816101fb565b82511561072d5782518084602001fd5b8160405162461bcd60e51b81526004016100fd91906108b7565b80356001600160a01b038116811461075e57600080fd5b919050565b803561075e8161096e565b60006080828403121561077f578081fd5b6040516080810181811067ffffffffffffffff821117156107ae57634e487b7160e01b83526041600452602483fd5b6040529050806107bd83610747565b8152602083013560208201526040830135600281106107db57600080fd5b60408201526107ec60608401610763565b60608201525092915050565b600060208284031215610809578081fd5b81516101fb8161096e565b60008060008060e08587031215610829578283fd5b610833868661076e565b935061084160808601610747565b925061084f60a08601610747565b9396929550929360c00135925050565b600080600060c08486031215610873578283fd5b61087d858561076e565b925061088b60808501610747565b915060a084013590509250925092565b600082516108ad818460208701610942565b9190910192915050565b60208152600082518060208401526108d6816040850160208701610942565b601f01601f19169190910160400192915050565b81516001600160a01b0316815260208083015190820152604082015160808201906002811061092957634e487b7160e01b600052602160045260246000fd5b8060408401525060608301511515606083015292915050565b60005b8381101561095d578181015183820152602001610945565b838111156103d35750506000910152565b801515811461097c57600080fd5b5056fea2646970667358221220e586752d26339a62f0914b6db33373367a2e3cad8e750dffb93031e185d89ebe64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}